// source: quic/core/proto/push_channel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var quic_core_proto_push_stream_pb = require('../../../quic/core/proto/push_stream_pb.js');
goog.object.extend(proto, quic_core_proto_push_stream_pb);
goog.exportSymbol('proto.quic.PushChannel', null, global);
goog.exportSymbol('proto.quic.PushChannel.CommandCase', null, global);
goog.exportSymbol('proto.quic.PushChannel.Response', null, global);
goog.exportSymbol('proto.quic.PushChannel.Response.CommandresponseCase', null, global);
goog.exportSymbol('proto.quic.PushChannelAllowDatagrams', null, global);
goog.exportSymbol('proto.quic.PushChannelChangeProperty', null, global);
goog.exportSymbol('proto.quic.PushChannelChangeProperty.PropertiesCase', null, global);
goog.exportSymbol('proto.quic.PushChannelDisallowDatagrams', null, global);
goog.exportSymbol('proto.quic.PushChannelFinishStream', null, global);
goog.exportSymbol('proto.quic.PushChannelMakeStream', null, global);
goog.exportSymbol('proto.quic.PushChannelMakeStream.Response', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quic.PushChannel.oneofGroups_);
};
goog.inherits(proto.quic.PushChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushChannel.displayName = 'proto.quic.PushChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushChannel.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quic.PushChannel.Response.oneofGroups_);
};
goog.inherits(proto.quic.PushChannel.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushChannel.Response.displayName = 'proto.quic.PushChannel.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushChannelAllowDatagrams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushChannelAllowDatagrams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushChannelAllowDatagrams.displayName = 'proto.quic.PushChannelAllowDatagrams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushChannelDisallowDatagrams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushChannelDisallowDatagrams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushChannelDisallowDatagrams.displayName = 'proto.quic.PushChannelDisallowDatagrams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushChannelFinishStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushChannelFinishStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushChannelFinishStream.displayName = 'proto.quic.PushChannelFinishStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushChannelMakeStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushChannelMakeStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushChannelMakeStream.displayName = 'proto.quic.PushChannelMakeStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushChannelMakeStream.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushChannelMakeStream.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushChannelMakeStream.Response.displayName = 'proto.quic.PushChannelMakeStream.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushChannelChangeProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quic.PushChannelChangeProperty.oneofGroups_);
};
goog.inherits(proto.quic.PushChannelChangeProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushChannelChangeProperty.displayName = 'proto.quic.PushChannelChangeProperty';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quic.PushChannel.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.quic.PushChannel.CommandCase = {
  COMMAND_NOT_SET: 0,
  STREAM: 2,
  ALLOW_DATAGRAMS: 3,
  DISALLOW_DATAGRAMS: 4,
  MAKE_STREAM: 5,
  FINISH_STREAM: 6,
  CHANGE_PROPERTY: 7
};

/**
 * @return {proto.quic.PushChannel.CommandCase}
 */
proto.quic.PushChannel.prototype.getCommandCase = function() {
  return /** @type {proto.quic.PushChannel.CommandCase} */(jspb.Message.computeOneofCase(this, proto.quic.PushChannel.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stream: (f = msg.getStream()) && quic_core_proto_push_stream_pb.PushStream.toObject(includeInstance, f),
    allowDatagrams: (f = msg.getAllowDatagrams()) && proto.quic.PushChannelAllowDatagrams.toObject(includeInstance, f),
    disallowDatagrams: (f = msg.getDisallowDatagrams()) && proto.quic.PushChannelDisallowDatagrams.toObject(includeInstance, f),
    makeStream: (f = msg.getMakeStream()) && proto.quic.PushChannelMakeStream.toObject(includeInstance, f),
    finishStream: (f = msg.getFinishStream()) && proto.quic.PushChannelFinishStream.toObject(includeInstance, f),
    changeProperty: (f = msg.getChangeProperty()) && proto.quic.PushChannelChangeProperty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushChannel}
 */
proto.quic.PushChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushChannel;
  return proto.quic.PushChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushChannel}
 */
proto.quic.PushChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    case 2:
      var value = new quic_core_proto_push_stream_pb.PushStream;
      reader.readMessage(value,quic_core_proto_push_stream_pb.PushStream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 3:
      var value = new proto.quic.PushChannelAllowDatagrams;
      reader.readMessage(value,proto.quic.PushChannelAllowDatagrams.deserializeBinaryFromReader);
      msg.setAllowDatagrams(value);
      break;
    case 4:
      var value = new proto.quic.PushChannelDisallowDatagrams;
      reader.readMessage(value,proto.quic.PushChannelDisallowDatagrams.deserializeBinaryFromReader);
      msg.setDisallowDatagrams(value);
      break;
    case 5:
      var value = new proto.quic.PushChannelMakeStream;
      reader.readMessage(value,proto.quic.PushChannelMakeStream.deserializeBinaryFromReader);
      msg.setMakeStream(value);
      break;
    case 6:
      var value = new proto.quic.PushChannelFinishStream;
      reader.readMessage(value,proto.quic.PushChannelFinishStream.deserializeBinaryFromReader);
      msg.setFinishStream(value);
      break;
    case 7:
      var value = new proto.quic.PushChannelChangeProperty;
      reader.readMessage(value,proto.quic.PushChannelChangeProperty.deserializeBinaryFromReader);
      msg.setChangeProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      quic_core_proto_push_stream_pb.PushStream.serializeBinaryToWriter
    );
  }
  f = message.getAllowDatagrams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.quic.PushChannelAllowDatagrams.serializeBinaryToWriter
    );
  }
  f = message.getDisallowDatagrams();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.quic.PushChannelDisallowDatagrams.serializeBinaryToWriter
    );
  }
  f = message.getMakeStream();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.quic.PushChannelMakeStream.serializeBinaryToWriter
    );
  }
  f = message.getFinishStream();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.quic.PushChannelFinishStream.serializeBinaryToWriter
    );
  }
  f = message.getChangeProperty();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.quic.PushChannelChangeProperty.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quic.PushChannel.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.quic.PushChannel.Response.CommandresponseCase = {
  COMMANDRESPONSE_NOT_SET: 0,
  STREAM: 1,
  MAKE_CHANNEL: 2
};

/**
 * @return {proto.quic.PushChannel.Response.CommandresponseCase}
 */
proto.quic.PushChannel.Response.prototype.getCommandresponseCase = function() {
  return /** @type {proto.quic.PushChannel.Response.CommandresponseCase} */(jspb.Message.computeOneofCase(this, proto.quic.PushChannel.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushChannel.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushChannel.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushChannel.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannel.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && quic_core_proto_push_stream_pb.PushStream.Response.toObject(includeInstance, f),
    makeChannel: (f = msg.getMakeChannel()) && proto.quic.PushChannelMakeStream.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushChannel.Response}
 */
proto.quic.PushChannel.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushChannel.Response;
  return proto.quic.PushChannel.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushChannel.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushChannel.Response}
 */
proto.quic.PushChannel.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new quic_core_proto_push_stream_pb.PushStream.Response;
      reader.readMessage(value,quic_core_proto_push_stream_pb.PushStream.Response.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.quic.PushChannelMakeStream.Response;
      reader.readMessage(value,proto.quic.PushChannelMakeStream.Response.deserializeBinaryFromReader);
      msg.setMakeChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushChannel.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushChannel.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushChannel.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannel.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      quic_core_proto_push_stream_pb.PushStream.Response.serializeBinaryToWriter
    );
  }
  f = message.getMakeChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quic.PushChannelMakeStream.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional PushStream.Response stream = 1;
 * @return {?proto.quic.PushStream.Response}
 */
proto.quic.PushChannel.Response.prototype.getStream = function() {
  return /** @type{?proto.quic.PushStream.Response} */ (
    jspb.Message.getWrapperField(this, quic_core_proto_push_stream_pb.PushStream.Response, 1));
};


/**
 * @param {?proto.quic.PushStream.Response|undefined} value
 * @return {!proto.quic.PushChannel.Response} returns this
*/
proto.quic.PushChannel.Response.prototype.setStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.quic.PushChannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushChannel.Response} returns this
 */
proto.quic.PushChannel.Response.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannel.Response.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PushChannelMakeStream.Response make_channel = 2;
 * @return {?proto.quic.PushChannelMakeStream.Response}
 */
proto.quic.PushChannel.Response.prototype.getMakeChannel = function() {
  return /** @type{?proto.quic.PushChannelMakeStream.Response} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushChannelMakeStream.Response, 2));
};


/**
 * @param {?proto.quic.PushChannelMakeStream.Response|undefined} value
 * @return {!proto.quic.PushChannel.Response} returns this
*/
proto.quic.PushChannel.Response.prototype.setMakeChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.quic.PushChannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushChannel.Response} returns this
 */
proto.quic.PushChannel.Response.prototype.clearMakeChannel = function() {
  return this.setMakeChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannel.Response.prototype.hasMakeChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 channel_id = 1;
 * @return {number}
 */
proto.quic.PushChannel.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushChannel} returns this
 */
proto.quic.PushChannel.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PushStream stream = 2;
 * @return {?proto.quic.PushStream}
 */
proto.quic.PushChannel.prototype.getStream = function() {
  return /** @type{?proto.quic.PushStream} */ (
    jspb.Message.getWrapperField(this, quic_core_proto_push_stream_pb.PushStream, 2));
};


/**
 * @param {?proto.quic.PushStream|undefined} value
 * @return {!proto.quic.PushChannel} returns this
*/
proto.quic.PushChannel.prototype.setStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.quic.PushChannel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushChannel} returns this
 */
proto.quic.PushChannel.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannel.prototype.hasStream = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PushChannelAllowDatagrams allow_datagrams = 3;
 * @return {?proto.quic.PushChannelAllowDatagrams}
 */
proto.quic.PushChannel.prototype.getAllowDatagrams = function() {
  return /** @type{?proto.quic.PushChannelAllowDatagrams} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushChannelAllowDatagrams, 3));
};


/**
 * @param {?proto.quic.PushChannelAllowDatagrams|undefined} value
 * @return {!proto.quic.PushChannel} returns this
*/
proto.quic.PushChannel.prototype.setAllowDatagrams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.quic.PushChannel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushChannel} returns this
 */
proto.quic.PushChannel.prototype.clearAllowDatagrams = function() {
  return this.setAllowDatagrams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannel.prototype.hasAllowDatagrams = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PushChannelDisallowDatagrams disallow_datagrams = 4;
 * @return {?proto.quic.PushChannelDisallowDatagrams}
 */
proto.quic.PushChannel.prototype.getDisallowDatagrams = function() {
  return /** @type{?proto.quic.PushChannelDisallowDatagrams} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushChannelDisallowDatagrams, 4));
};


/**
 * @param {?proto.quic.PushChannelDisallowDatagrams|undefined} value
 * @return {!proto.quic.PushChannel} returns this
*/
proto.quic.PushChannel.prototype.setDisallowDatagrams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.quic.PushChannel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushChannel} returns this
 */
proto.quic.PushChannel.prototype.clearDisallowDatagrams = function() {
  return this.setDisallowDatagrams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannel.prototype.hasDisallowDatagrams = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PushChannelMakeStream make_stream = 5;
 * @return {?proto.quic.PushChannelMakeStream}
 */
proto.quic.PushChannel.prototype.getMakeStream = function() {
  return /** @type{?proto.quic.PushChannelMakeStream} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushChannelMakeStream, 5));
};


/**
 * @param {?proto.quic.PushChannelMakeStream|undefined} value
 * @return {!proto.quic.PushChannel} returns this
*/
proto.quic.PushChannel.prototype.setMakeStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.quic.PushChannel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushChannel} returns this
 */
proto.quic.PushChannel.prototype.clearMakeStream = function() {
  return this.setMakeStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannel.prototype.hasMakeStream = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PushChannelFinishStream finish_stream = 6;
 * @return {?proto.quic.PushChannelFinishStream}
 */
proto.quic.PushChannel.prototype.getFinishStream = function() {
  return /** @type{?proto.quic.PushChannelFinishStream} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushChannelFinishStream, 6));
};


/**
 * @param {?proto.quic.PushChannelFinishStream|undefined} value
 * @return {!proto.quic.PushChannel} returns this
*/
proto.quic.PushChannel.prototype.setFinishStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.quic.PushChannel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushChannel} returns this
 */
proto.quic.PushChannel.prototype.clearFinishStream = function() {
  return this.setFinishStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannel.prototype.hasFinishStream = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PushChannelChangeProperty change_property = 7;
 * @return {?proto.quic.PushChannelChangeProperty}
 */
proto.quic.PushChannel.prototype.getChangeProperty = function() {
  return /** @type{?proto.quic.PushChannelChangeProperty} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushChannelChangeProperty, 7));
};


/**
 * @param {?proto.quic.PushChannelChangeProperty|undefined} value
 * @return {!proto.quic.PushChannel} returns this
*/
proto.quic.PushChannel.prototype.setChangeProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.quic.PushChannel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushChannel} returns this
 */
proto.quic.PushChannel.prototype.clearChangeProperty = function() {
  return this.setChangeProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannel.prototype.hasChangeProperty = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushChannelAllowDatagrams.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushChannelAllowDatagrams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushChannelAllowDatagrams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelAllowDatagrams.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushChannelAllowDatagrams}
 */
proto.quic.PushChannelAllowDatagrams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushChannelAllowDatagrams;
  return proto.quic.PushChannelAllowDatagrams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushChannelAllowDatagrams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushChannelAllowDatagrams}
 */
proto.quic.PushChannelAllowDatagrams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushChannelAllowDatagrams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushChannelAllowDatagrams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushChannelAllowDatagrams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelAllowDatagrams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 size = 1;
 * @return {number}
 */
proto.quic.PushChannelAllowDatagrams.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushChannelAllowDatagrams} returns this
 */
proto.quic.PushChannelAllowDatagrams.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushChannelDisallowDatagrams.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushChannelDisallowDatagrams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushChannelDisallowDatagrams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelDisallowDatagrams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushChannelDisallowDatagrams}
 */
proto.quic.PushChannelDisallowDatagrams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushChannelDisallowDatagrams;
  return proto.quic.PushChannelDisallowDatagrams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushChannelDisallowDatagrams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushChannelDisallowDatagrams}
 */
proto.quic.PushChannelDisallowDatagrams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushChannelDisallowDatagrams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushChannelDisallowDatagrams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushChannelDisallowDatagrams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelDisallowDatagrams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushChannelFinishStream.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushChannelFinishStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushChannelFinishStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelFinishStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushChannelFinishStream}
 */
proto.quic.PushChannelFinishStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushChannelFinishStream;
  return proto.quic.PushChannelFinishStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushChannelFinishStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushChannelFinishStream}
 */
proto.quic.PushChannelFinishStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStreamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushChannelFinishStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushChannelFinishStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushChannelFinishStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelFinishStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 stream_id = 1;
 * @return {number}
 */
proto.quic.PushChannelFinishStream.prototype.getStreamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushChannelFinishStream} returns this
 */
proto.quic.PushChannelFinishStream.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushChannelMakeStream.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushChannelMakeStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushChannelMakeStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelMakeStream.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushChannelMakeStream}
 */
proto.quic.PushChannelMakeStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushChannelMakeStream;
  return proto.quic.PushChannelMakeStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushChannelMakeStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushChannelMakeStream}
 */
proto.quic.PushChannelMakeStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushChannelMakeStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushChannelMakeStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushChannelMakeStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelMakeStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushChannelMakeStream.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushChannelMakeStream.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushChannelMakeStream.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelMakeStream.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushChannelMakeStream.Response}
 */
proto.quic.PushChannelMakeStream.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushChannelMakeStream.Response;
  return proto.quic.PushChannelMakeStream.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushChannelMakeStream.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushChannelMakeStream.Response}
 */
proto.quic.PushChannelMakeStream.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStreamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushChannelMakeStream.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushChannelMakeStream.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushChannelMakeStream.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelMakeStream.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 stream_id = 1;
 * @return {number}
 */
proto.quic.PushChannelMakeStream.Response.prototype.getStreamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushChannelMakeStream.Response} returns this
 */
proto.quic.PushChannelMakeStream.Response.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quic.PushChannelChangeProperty.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.quic.PushChannelChangeProperty.PropertiesCase = {
  PROPERTIES_NOT_SET: 0,
  MAX_RATE: 1,
  MAX_IDLE: 2
};

/**
 * @return {proto.quic.PushChannelChangeProperty.PropertiesCase}
 */
proto.quic.PushChannelChangeProperty.prototype.getPropertiesCase = function() {
  return /** @type {proto.quic.PushChannelChangeProperty.PropertiesCase} */(jspb.Message.computeOneofCase(this, proto.quic.PushChannelChangeProperty.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushChannelChangeProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushChannelChangeProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushChannelChangeProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelChangeProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxRate: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxIdle: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushChannelChangeProperty}
 */
proto.quic.PushChannelChangeProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushChannelChangeProperty;
  return proto.quic.PushChannelChangeProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushChannelChangeProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushChannelChangeProperty}
 */
proto.quic.PushChannelChangeProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxRate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxIdle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushChannelChangeProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushChannelChangeProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushChannelChangeProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushChannelChangeProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 max_rate = 1;
 * @return {number}
 */
proto.quic.PushChannelChangeProperty.prototype.getMaxRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushChannelChangeProperty} returns this
 */
proto.quic.PushChannelChangeProperty.prototype.setMaxRate = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.quic.PushChannelChangeProperty.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.quic.PushChannelChangeProperty} returns this
 */
proto.quic.PushChannelChangeProperty.prototype.clearMaxRate = function() {
  return jspb.Message.setOneofField(this, 1, proto.quic.PushChannelChangeProperty.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannelChangeProperty.prototype.hasMaxRate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 max_idle = 2;
 * @return {number}
 */
proto.quic.PushChannelChangeProperty.prototype.getMaxIdle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushChannelChangeProperty} returns this
 */
proto.quic.PushChannelChangeProperty.prototype.setMaxIdle = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.quic.PushChannelChangeProperty.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.quic.PushChannelChangeProperty} returns this
 */
proto.quic.PushChannelChangeProperty.prototype.clearMaxIdle = function() {
  return jspb.Message.setOneofField(this, 2, proto.quic.PushChannelChangeProperty.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushChannelChangeProperty.prototype.hasMaxIdle = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.quic);
