// source: quic/core/proto/push_pool.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var quic_core_proto_push_channel_pb = require('../../../quic/core/proto/push_channel_pb.js');
goog.object.extend(proto, quic_core_proto_push_channel_pb);
goog.exportSymbol('proto.quic.PushPool', null, global);
goog.exportSymbol('proto.quic.PushPool.CommandCase', null, global);
goog.exportSymbol('proto.quic.PushPool.Response', null, global);
goog.exportSymbol('proto.quic.PushPool.Response.CommandresponseCase', null, global);
goog.exportSymbol('proto.quic.PushPoolFinishChannel', null, global);
goog.exportSymbol('proto.quic.PushPoolMakeChannel', null, global);
goog.exportSymbol('proto.quic.PushPoolMakeChannel.Response', null, global);
goog.exportSymbol('proto.quic.PushPoolMakeUnicast', null, global);
goog.exportSymbol('proto.quic.PushPoolMakeUnicast.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quic.PushPool.oneofGroups_);
};
goog.inherits(proto.quic.PushPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushPool.displayName = 'proto.quic.PushPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushPool.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quic.PushPool.Response.oneofGroups_);
};
goog.inherits(proto.quic.PushPool.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushPool.Response.displayName = 'proto.quic.PushPool.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushPoolFinishChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushPoolFinishChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushPoolFinishChannel.displayName = 'proto.quic.PushPoolFinishChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushPoolMakeChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushPoolMakeChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushPoolMakeChannel.displayName = 'proto.quic.PushPoolMakeChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushPoolMakeChannel.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushPoolMakeChannel.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushPoolMakeChannel.Response.displayName = 'proto.quic.PushPoolMakeChannel.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushPoolMakeUnicast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushPoolMakeUnicast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushPoolMakeUnicast.displayName = 'proto.quic.PushPoolMakeUnicast';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quic.PushPool.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.quic.PushPool.CommandCase = {
  COMMAND_NOT_SET: 0,
  CHANNEL: 2,
  MAKE_CHANNEL: 3,
  MAKE_UNICAST: 4,
  FINISH_CHANNEL: 5
};

/**
 * @return {proto.quic.PushPool.CommandCase}
 */
proto.quic.PushPool.prototype.getCommandCase = function() {
  return /** @type {proto.quic.PushPool.CommandCase} */(jspb.Message.computeOneofCase(this, proto.quic.PushPool.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushPool.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channel: (f = msg.getChannel()) && quic_core_proto_push_channel_pb.PushChannel.toObject(includeInstance, f),
    makeChannel: (f = msg.getMakeChannel()) && proto.quic.PushPoolMakeChannel.toObject(includeInstance, f),
    makeUnicast: (f = msg.getMakeUnicast()) && proto.quic.PushPoolMakeUnicast.toObject(includeInstance, f),
    finishChannel: (f = msg.getFinishChannel()) && proto.quic.PushPoolFinishChannel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushPool}
 */
proto.quic.PushPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushPool;
  return proto.quic.PushPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushPool}
 */
proto.quic.PushPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolId(value);
      break;
    case 2:
      var value = new quic_core_proto_push_channel_pb.PushChannel;
      reader.readMessage(value,quic_core_proto_push_channel_pb.PushChannel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 3:
      var value = new proto.quic.PushPoolMakeChannel;
      reader.readMessage(value,proto.quic.PushPoolMakeChannel.deserializeBinaryFromReader);
      msg.setMakeChannel(value);
      break;
    case 4:
      var value = new proto.quic.PushPoolMakeUnicast;
      reader.readMessage(value,proto.quic.PushPoolMakeUnicast.deserializeBinaryFromReader);
      msg.setMakeUnicast(value);
      break;
    case 5:
      var value = new proto.quic.PushPoolFinishChannel;
      reader.readMessage(value,proto.quic.PushPoolFinishChannel.deserializeBinaryFromReader);
      msg.setFinishChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      quic_core_proto_push_channel_pb.PushChannel.serializeBinaryToWriter
    );
  }
  f = message.getMakeChannel();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.quic.PushPoolMakeChannel.serializeBinaryToWriter
    );
  }
  f = message.getMakeUnicast();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.quic.PushPoolMakeUnicast.serializeBinaryToWriter
    );
  }
  f = message.getFinishChannel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.quic.PushPoolFinishChannel.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quic.PushPool.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.quic.PushPool.Response.CommandresponseCase = {
  COMMANDRESPONSE_NOT_SET: 0,
  CHANNEL: 1,
  MAKE_CHANNEL: 2
};

/**
 * @return {proto.quic.PushPool.Response.CommandresponseCase}
 */
proto.quic.PushPool.Response.prototype.getCommandresponseCase = function() {
  return /** @type {proto.quic.PushPool.Response.CommandresponseCase} */(jspb.Message.computeOneofCase(this, proto.quic.PushPool.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushPool.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushPool.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushPool.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPool.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: (f = msg.getChannel()) && quic_core_proto_push_channel_pb.PushChannel.Response.toObject(includeInstance, f),
    makeChannel: (f = msg.getMakeChannel()) && proto.quic.PushPoolMakeChannel.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushPool.Response}
 */
proto.quic.PushPool.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushPool.Response;
  return proto.quic.PushPool.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushPool.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushPool.Response}
 */
proto.quic.PushPool.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new quic_core_proto_push_channel_pb.PushChannel.Response;
      reader.readMessage(value,quic_core_proto_push_channel_pb.PushChannel.Response.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 2:
      var value = new proto.quic.PushPoolMakeChannel.Response;
      reader.readMessage(value,proto.quic.PushPoolMakeChannel.Response.deserializeBinaryFromReader);
      msg.setMakeChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushPool.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushPool.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushPool.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPool.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      quic_core_proto_push_channel_pb.PushChannel.Response.serializeBinaryToWriter
    );
  }
  f = message.getMakeChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quic.PushPoolMakeChannel.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional PushChannel.Response channel = 1;
 * @return {?proto.quic.PushChannel.Response}
 */
proto.quic.PushPool.Response.prototype.getChannel = function() {
  return /** @type{?proto.quic.PushChannel.Response} */ (
    jspb.Message.getWrapperField(this, quic_core_proto_push_channel_pb.PushChannel.Response, 1));
};


/**
 * @param {?proto.quic.PushChannel.Response|undefined} value
 * @return {!proto.quic.PushPool.Response} returns this
*/
proto.quic.PushPool.Response.prototype.setChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.quic.PushPool.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushPool.Response} returns this
 */
proto.quic.PushPool.Response.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushPool.Response.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PushPoolMakeChannel.Response make_channel = 2;
 * @return {?proto.quic.PushPoolMakeChannel.Response}
 */
proto.quic.PushPool.Response.prototype.getMakeChannel = function() {
  return /** @type{?proto.quic.PushPoolMakeChannel.Response} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushPoolMakeChannel.Response, 2));
};


/**
 * @param {?proto.quic.PushPoolMakeChannel.Response|undefined} value
 * @return {!proto.quic.PushPool.Response} returns this
*/
proto.quic.PushPool.Response.prototype.setMakeChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.quic.PushPool.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushPool.Response} returns this
 */
proto.quic.PushPool.Response.prototype.clearMakeChannel = function() {
  return this.setMakeChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushPool.Response.prototype.hasMakeChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 pool_id = 1;
 * @return {number}
 */
proto.quic.PushPool.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushPool} returns this
 */
proto.quic.PushPool.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PushChannel channel = 2;
 * @return {?proto.quic.PushChannel}
 */
proto.quic.PushPool.prototype.getChannel = function() {
  return /** @type{?proto.quic.PushChannel} */ (
    jspb.Message.getWrapperField(this, quic_core_proto_push_channel_pb.PushChannel, 2));
};


/**
 * @param {?proto.quic.PushChannel|undefined} value
 * @return {!proto.quic.PushPool} returns this
*/
proto.quic.PushPool.prototype.setChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.quic.PushPool.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushPool} returns this
 */
proto.quic.PushPool.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushPool.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PushPoolMakeChannel make_channel = 3;
 * @return {?proto.quic.PushPoolMakeChannel}
 */
proto.quic.PushPool.prototype.getMakeChannel = function() {
  return /** @type{?proto.quic.PushPoolMakeChannel} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushPoolMakeChannel, 3));
};


/**
 * @param {?proto.quic.PushPoolMakeChannel|undefined} value
 * @return {!proto.quic.PushPool} returns this
*/
proto.quic.PushPool.prototype.setMakeChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.quic.PushPool.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushPool} returns this
 */
proto.quic.PushPool.prototype.clearMakeChannel = function() {
  return this.setMakeChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushPool.prototype.hasMakeChannel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PushPoolMakeUnicast make_unicast = 4;
 * @return {?proto.quic.PushPoolMakeUnicast}
 */
proto.quic.PushPool.prototype.getMakeUnicast = function() {
  return /** @type{?proto.quic.PushPoolMakeUnicast} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushPoolMakeUnicast, 4));
};


/**
 * @param {?proto.quic.PushPoolMakeUnicast|undefined} value
 * @return {!proto.quic.PushPool} returns this
*/
proto.quic.PushPool.prototype.setMakeUnicast = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.quic.PushPool.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushPool} returns this
 */
proto.quic.PushPool.prototype.clearMakeUnicast = function() {
  return this.setMakeUnicast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushPool.prototype.hasMakeUnicast = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PushPoolFinishChannel finish_channel = 5;
 * @return {?proto.quic.PushPoolFinishChannel}
 */
proto.quic.PushPool.prototype.getFinishChannel = function() {
  return /** @type{?proto.quic.PushPoolFinishChannel} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushPoolFinishChannel, 5));
};


/**
 * @param {?proto.quic.PushPoolFinishChannel|undefined} value
 * @return {!proto.quic.PushPool} returns this
*/
proto.quic.PushPool.prototype.setFinishChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.quic.PushPool.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushPool} returns this
 */
proto.quic.PushPool.prototype.clearFinishChannel = function() {
  return this.setFinishChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushPool.prototype.hasFinishChannel = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushPoolFinishChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushPoolFinishChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushPoolFinishChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPoolFinishChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushPoolFinishChannel}
 */
proto.quic.PushPoolFinishChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushPoolFinishChannel;
  return proto.quic.PushPoolFinishChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushPoolFinishChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushPoolFinishChannel}
 */
proto.quic.PushPoolFinishChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushPoolFinishChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushPoolFinishChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushPoolFinishChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPoolFinishChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 channel_id = 1;
 * @return {number}
 */
proto.quic.PushPoolFinishChannel.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushPoolFinishChannel} returns this
 */
proto.quic.PushPoolFinishChannel.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushPoolMakeChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushPoolMakeChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushPoolMakeChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPoolMakeChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceIp: msg.getSourceIp_asB64(),
    groupIp: msg.getGroupIp_asB64(),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxRate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxIdle: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushPoolMakeChannel}
 */
proto.quic.PushPoolMakeChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushPoolMakeChannel;
  return proto.quic.PushPoolMakeChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushPoolMakeChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushPoolMakeChannel}
 */
proto.quic.PushPoolMakeChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSourceIp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxRate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxIdle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushPoolMakeChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushPoolMakeChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushPoolMakeChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPoolMakeChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxRate();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxIdle();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushPoolMakeChannel.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushPoolMakeChannel.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushPoolMakeChannel.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPoolMakeChannel.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushPoolMakeChannel.Response}
 */
proto.quic.PushPoolMakeChannel.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushPoolMakeChannel.Response;
  return proto.quic.PushPoolMakeChannel.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushPoolMakeChannel.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushPoolMakeChannel.Response}
 */
proto.quic.PushPoolMakeChannel.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushPoolMakeChannel.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushPoolMakeChannel.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushPoolMakeChannel.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPoolMakeChannel.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 channel_id = 1;
 * @return {number}
 */
proto.quic.PushPoolMakeChannel.Response.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushPoolMakeChannel.Response} returns this
 */
proto.quic.PushPoolMakeChannel.Response.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes source_ip = 1;
 * @return {!(string|Uint8Array)}
 */
proto.quic.PushPoolMakeChannel.prototype.getSourceIp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes source_ip = 1;
 * This is a type-conversion wrapper around `getSourceIp()`
 * @return {string}
 */
proto.quic.PushPoolMakeChannel.prototype.getSourceIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSourceIp()));
};


/**
 * optional bytes source_ip = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSourceIp()`
 * @return {!Uint8Array}
 */
proto.quic.PushPoolMakeChannel.prototype.getSourceIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSourceIp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quic.PushPoolMakeChannel} returns this
 */
proto.quic.PushPoolMakeChannel.prototype.setSourceIp = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes group_ip = 2;
 * @return {!(string|Uint8Array)}
 */
proto.quic.PushPoolMakeChannel.prototype.getGroupIp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes group_ip = 2;
 * This is a type-conversion wrapper around `getGroupIp()`
 * @return {string}
 */
proto.quic.PushPoolMakeChannel.prototype.getGroupIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupIp()));
};


/**
 * optional bytes group_ip = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupIp()`
 * @return {!Uint8Array}
 */
proto.quic.PushPoolMakeChannel.prototype.getGroupIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupIp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quic.PushPoolMakeChannel} returns this
 */
proto.quic.PushPoolMakeChannel.prototype.setGroupIp = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.quic.PushPoolMakeChannel.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushPoolMakeChannel} returns this
 */
proto.quic.PushPoolMakeChannel.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 max_rate = 4;
 * @return {number}
 */
proto.quic.PushPoolMakeChannel.prototype.getMaxRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushPoolMakeChannel} returns this
 */
proto.quic.PushPoolMakeChannel.prototype.setMaxRate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 max_idle = 5;
 * @return {number}
 */
proto.quic.PushPoolMakeChannel.prototype.getMaxIdle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushPoolMakeChannel} returns this
 */
proto.quic.PushPoolMakeChannel.prototype.setMaxIdle = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushPoolMakeUnicast.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushPoolMakeUnicast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushPoolMakeUnicast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPoolMakeUnicast.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushPoolMakeUnicast}
 */
proto.quic.PushPoolMakeUnicast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushPoolMakeUnicast;
  return proto.quic.PushPoolMakeUnicast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushPoolMakeUnicast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushPoolMakeUnicast}
 */
proto.quic.PushPoolMakeUnicast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.quic.PushPoolMakeUnicast.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushPoolMakeUnicast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushPoolMakeUnicast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushPoolMakeUnicast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushPoolMakeUnicast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.quic.PushPoolMakeUnicast.Type = {
  FALLBACK: 0,
  SUPPLEMENT: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.quic.PushPoolMakeUnicast.Type}
 */
proto.quic.PushPoolMakeUnicast.prototype.getType = function() {
  return /** @type {!proto.quic.PushPoolMakeUnicast.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.quic.PushPoolMakeUnicast.Type} value
 * @return {!proto.quic.PushPoolMakeUnicast} returns this
 */
proto.quic.PushPoolMakeUnicast.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


goog.object.extend(exports, proto.quic);
