// source: quic/core/proto/push_server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var quic_core_proto_push_pool_pb = require('../../../quic/core/proto/push_pool_pb.js');
goog.object.extend(proto, quic_core_proto_push_pool_pb);
goog.exportSymbol('proto.quic.PushServer', null, global);
goog.exportSymbol('proto.quic.PushServer.CommandCase', null, global);
goog.exportSymbol('proto.quic.PushServer.Response', null, global);
goog.exportSymbol('proto.quic.PushServer.Response.CommandresponseCase', null, global);
goog.exportSymbol('proto.quic.PushServerActivatePool', null, global);
goog.exportSymbol('proto.quic.PushServerDeactivatePool', null, global);
goog.exportSymbol('proto.quic.PushServerMakePool', null, global);
goog.exportSymbol('proto.quic.PushServerMakePool.Response', null, global);
goog.exportSymbol('proto.quic.PushServerMakePool.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quic.PushServer.oneofGroups_);
};
goog.inherits(proto.quic.PushServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushServer.displayName = 'proto.quic.PushServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushServer.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.quic.PushServer.Response.oneofGroups_);
};
goog.inherits(proto.quic.PushServer.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushServer.Response.displayName = 'proto.quic.PushServer.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushServerActivatePool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushServerActivatePool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushServerActivatePool.displayName = 'proto.quic.PushServerActivatePool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushServerDeactivatePool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushServerDeactivatePool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushServerDeactivatePool.displayName = 'proto.quic.PushServerDeactivatePool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushServerMakePool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushServerMakePool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushServerMakePool.displayName = 'proto.quic.PushServerMakePool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quic.PushServerMakePool.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quic.PushServerMakePool.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quic.PushServerMakePool.Response.displayName = 'proto.quic.PushServerMakePool.Response';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quic.PushServer.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.quic.PushServer.CommandCase = {
  COMMAND_NOT_SET: 0,
  POOL: 1,
  MAKE_POOL: 2,
  ACTIVATE_POOL: 3,
  DEACTIVATE_POOL: 4
};

/**
 * @return {proto.quic.PushServer.CommandCase}
 */
proto.quic.PushServer.prototype.getCommandCase = function() {
  return /** @type {proto.quic.PushServer.CommandCase} */(jspb.Message.computeOneofCase(this, proto.quic.PushServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushServer.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    pool: (f = msg.getPool()) && quic_core_proto_push_pool_pb.PushPool.toObject(includeInstance, f),
    makePool: (f = msg.getMakePool()) && proto.quic.PushServerMakePool.toObject(includeInstance, f),
    activatePool: (f = msg.getActivatePool()) && proto.quic.PushServerActivatePool.toObject(includeInstance, f),
    deactivatePool: (f = msg.getDeactivatePool()) && proto.quic.PushServerDeactivatePool.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushServer}
 */
proto.quic.PushServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushServer;
  return proto.quic.PushServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushServer}
 */
proto.quic.PushServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new quic_core_proto_push_pool_pb.PushPool;
      reader.readMessage(value,quic_core_proto_push_pool_pb.PushPool.deserializeBinaryFromReader);
      msg.setPool(value);
      break;
    case 2:
      var value = new proto.quic.PushServerMakePool;
      reader.readMessage(value,proto.quic.PushServerMakePool.deserializeBinaryFromReader);
      msg.setMakePool(value);
      break;
    case 3:
      var value = new proto.quic.PushServerActivatePool;
      reader.readMessage(value,proto.quic.PushServerActivatePool.deserializeBinaryFromReader);
      msg.setActivatePool(value);
      break;
    case 4:
      var value = new proto.quic.PushServerDeactivatePool;
      reader.readMessage(value,proto.quic.PushServerDeactivatePool.deserializeBinaryFromReader);
      msg.setDeactivatePool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPool();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      quic_core_proto_push_pool_pb.PushPool.serializeBinaryToWriter
    );
  }
  f = message.getMakePool();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.quic.PushServerMakePool.serializeBinaryToWriter
    );
  }
  f = message.getActivatePool();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.quic.PushServerActivatePool.serializeBinaryToWriter
    );
  }
  f = message.getDeactivatePool();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.quic.PushServerDeactivatePool.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.quic.PushServer.Response.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.quic.PushServer.Response.CommandresponseCase = {
  COMMANDRESPONSE_NOT_SET: 0,
  POOL: 3,
  MAKE_POOL: 4
};

/**
 * @return {proto.quic.PushServer.Response.CommandresponseCase}
 */
proto.quic.PushServer.Response.prototype.getCommandresponseCase = function() {
  return /** @type {proto.quic.PushServer.Response.CommandresponseCase} */(jspb.Message.computeOneofCase(this, proto.quic.PushServer.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushServer.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushServer.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushServer.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServer.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pool: (f = msg.getPool()) && quic_core_proto_push_pool_pb.PushPool.Response.toObject(includeInstance, f),
    makePool: (f = msg.getMakePool()) && proto.quic.PushServerMakePool.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushServer.Response}
 */
proto.quic.PushServer.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushServer.Response;
  return proto.quic.PushServer.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushServer.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushServer.Response}
 */
proto.quic.PushServer.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    case 3:
      var value = new quic_core_proto_push_pool_pb.PushPool.Response;
      reader.readMessage(value,quic_core_proto_push_pool_pb.PushPool.Response.deserializeBinaryFromReader);
      msg.setPool(value);
      break;
    case 4:
      var value = new proto.quic.PushServerMakePool.Response;
      reader.readMessage(value,proto.quic.PushServerMakePool.Response.deserializeBinaryFromReader);
      msg.setMakePool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushServer.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushServer.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushServer.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServer.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPool();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      quic_core_proto_push_pool_pb.PushPool.Response.serializeBinaryToWriter
    );
  }
  f = message.getMakePool();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.quic.PushServerMakePool.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.quic.PushServer.Response.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quic.PushServer.Response} returns this
 */
proto.quic.PushServer.Response.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.quic.PushServer.Response.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quic.PushServer.Response} returns this
 */
proto.quic.PushServer.Response.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PushPool.Response pool = 3;
 * @return {?proto.quic.PushPool.Response}
 */
proto.quic.PushServer.Response.prototype.getPool = function() {
  return /** @type{?proto.quic.PushPool.Response} */ (
    jspb.Message.getWrapperField(this, quic_core_proto_push_pool_pb.PushPool.Response, 3));
};


/**
 * @param {?proto.quic.PushPool.Response|undefined} value
 * @return {!proto.quic.PushServer.Response} returns this
*/
proto.quic.PushServer.Response.prototype.setPool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.quic.PushServer.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushServer.Response} returns this
 */
proto.quic.PushServer.Response.prototype.clearPool = function() {
  return this.setPool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushServer.Response.prototype.hasPool = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PushServerMakePool.Response make_pool = 4;
 * @return {?proto.quic.PushServerMakePool.Response}
 */
proto.quic.PushServer.Response.prototype.getMakePool = function() {
  return /** @type{?proto.quic.PushServerMakePool.Response} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushServerMakePool.Response, 4));
};


/**
 * @param {?proto.quic.PushServerMakePool.Response|undefined} value
 * @return {!proto.quic.PushServer.Response} returns this
*/
proto.quic.PushServer.Response.prototype.setMakePool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.quic.PushServer.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushServer.Response} returns this
 */
proto.quic.PushServer.Response.prototype.clearMakePool = function() {
  return this.setMakePool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushServer.Response.prototype.hasMakePool = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PushPool pool = 1;
 * @return {?proto.quic.PushPool}
 */
proto.quic.PushServer.prototype.getPool = function() {
  return /** @type{?proto.quic.PushPool} */ (
    jspb.Message.getWrapperField(this, quic_core_proto_push_pool_pb.PushPool, 1));
};


/**
 * @param {?proto.quic.PushPool|undefined} value
 * @return {!proto.quic.PushServer} returns this
*/
proto.quic.PushServer.prototype.setPool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.quic.PushServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushServer} returns this
 */
proto.quic.PushServer.prototype.clearPool = function() {
  return this.setPool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushServer.prototype.hasPool = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PushServerMakePool make_pool = 2;
 * @return {?proto.quic.PushServerMakePool}
 */
proto.quic.PushServer.prototype.getMakePool = function() {
  return /** @type{?proto.quic.PushServerMakePool} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushServerMakePool, 2));
};


/**
 * @param {?proto.quic.PushServerMakePool|undefined} value
 * @return {!proto.quic.PushServer} returns this
*/
proto.quic.PushServer.prototype.setMakePool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.quic.PushServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushServer} returns this
 */
proto.quic.PushServer.prototype.clearMakePool = function() {
  return this.setMakePool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushServer.prototype.hasMakePool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PushServerActivatePool activate_pool = 3;
 * @return {?proto.quic.PushServerActivatePool}
 */
proto.quic.PushServer.prototype.getActivatePool = function() {
  return /** @type{?proto.quic.PushServerActivatePool} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushServerActivatePool, 3));
};


/**
 * @param {?proto.quic.PushServerActivatePool|undefined} value
 * @return {!proto.quic.PushServer} returns this
*/
proto.quic.PushServer.prototype.setActivatePool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.quic.PushServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushServer} returns this
 */
proto.quic.PushServer.prototype.clearActivatePool = function() {
  return this.setActivatePool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushServer.prototype.hasActivatePool = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PushServerDeactivatePool deactivate_pool = 4;
 * @return {?proto.quic.PushServerDeactivatePool}
 */
proto.quic.PushServer.prototype.getDeactivatePool = function() {
  return /** @type{?proto.quic.PushServerDeactivatePool} */ (
    jspb.Message.getWrapperField(this, proto.quic.PushServerDeactivatePool, 4));
};


/**
 * @param {?proto.quic.PushServerDeactivatePool|undefined} value
 * @return {!proto.quic.PushServer} returns this
*/
proto.quic.PushServer.prototype.setDeactivatePool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.quic.PushServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quic.PushServer} returns this
 */
proto.quic.PushServer.prototype.clearDeactivatePool = function() {
  return this.setDeactivatePool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quic.PushServer.prototype.hasDeactivatePool = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushServerActivatePool.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushServerActivatePool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushServerActivatePool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServerActivatePool.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushServerActivatePool}
 */
proto.quic.PushServerActivatePool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushServerActivatePool;
  return proto.quic.PushServerActivatePool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushServerActivatePool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushServerActivatePool}
 */
proto.quic.PushServerActivatePool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoolId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushServerActivatePool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushServerActivatePool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushServerActivatePool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServerActivatePool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
};


/**
 * optional int32 pool_id = 14;
 * @return {number}
 */
proto.quic.PushServerActivatePool.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushServerActivatePool} returns this
 */
proto.quic.PushServerActivatePool.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushServerDeactivatePool.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushServerDeactivatePool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushServerDeactivatePool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServerDeactivatePool.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushServerDeactivatePool}
 */
proto.quic.PushServerDeactivatePool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushServerDeactivatePool;
  return proto.quic.PushServerDeactivatePool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushServerDeactivatePool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushServerDeactivatePool}
 */
proto.quic.PushServerDeactivatePool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushServerDeactivatePool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushServerDeactivatePool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushServerDeactivatePool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServerDeactivatePool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 pool_id = 1;
 * @return {number}
 */
proto.quic.PushServerDeactivatePool.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushServerDeactivatePool} returns this
 */
proto.quic.PushServerDeactivatePool.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushServerMakePool.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushServerMakePool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushServerMakePool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServerMakePool.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushServerMakePool}
 */
proto.quic.PushServerMakePool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushServerMakePool;
  return proto.quic.PushServerMakePool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushServerMakePool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushServerMakePool}
 */
proto.quic.PushServerMakePool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.quic.PushServerMakePool.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushServerMakePool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushServerMakePool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushServerMakePool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServerMakePool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.quic.PushServerMakePool.Type = {
  RESERVED: 0,
  ALTERNATIVES: 1,
  ORDEREDLAYERS: 2,
  ARBITRARYLAYERS: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quic.PushServerMakePool.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.quic.PushServerMakePool.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quic.PushServerMakePool.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServerMakePool.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quic.PushServerMakePool.Response}
 */
proto.quic.PushServerMakePool.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quic.PushServerMakePool.Response;
  return proto.quic.PushServerMakePool.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quic.PushServerMakePool.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quic.PushServerMakePool.Response}
 */
proto.quic.PushServerMakePool.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quic.PushServerMakePool.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quic.PushServerMakePool.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quic.PushServerMakePool.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quic.PushServerMakePool.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 pool_id = 1;
 * @return {number}
 */
proto.quic.PushServerMakePool.Response.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quic.PushServerMakePool.Response} returns this
 */
proto.quic.PushServerMakePool.Response.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.quic.PushServerMakePool.Type}
 */
proto.quic.PushServerMakePool.prototype.getType = function() {
  return /** @type {!proto.quic.PushServerMakePool.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.quic.PushServerMakePool.Type} value
 * @return {!proto.quic.PushServerMakePool} returns this
 */
proto.quic.PushServerMakePool.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


goog.object.extend(exports, proto.quic);
