// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pool.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Pool_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Pool_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Session.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Pool_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Pool_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Pool_2eproto;
namespace ServerPushInterface {
class Pool;
class PoolDefaultTypeInternal;
extern PoolDefaultTypeInternal _Pool_default_instance_;
class PoolFinishSession;
class PoolFinishSessionDefaultTypeInternal;
extern PoolFinishSessionDefaultTypeInternal _PoolFinishSession_default_instance_;
class PoolMakeSession;
class PoolMakeSessionDefaultTypeInternal;
extern PoolMakeSessionDefaultTypeInternal _PoolMakeSession_default_instance_;
class PoolMakeSession_Response;
class PoolMakeSession_ResponseDefaultTypeInternal;
extern PoolMakeSession_ResponseDefaultTypeInternal _PoolMakeSession_Response_default_instance_;
class PoolMakeUnicast;
class PoolMakeUnicastDefaultTypeInternal;
extern PoolMakeUnicastDefaultTypeInternal _PoolMakeUnicast_default_instance_;
class Pool_Response;
class Pool_ResponseDefaultTypeInternal;
extern Pool_ResponseDefaultTypeInternal _Pool_Response_default_instance_;
}  // namespace ServerPushInterface
PROTOBUF_NAMESPACE_OPEN
template<> ::ServerPushInterface::Pool* Arena::CreateMaybeMessage<::ServerPushInterface::Pool>(Arena*);
template<> ::ServerPushInterface::PoolFinishSession* Arena::CreateMaybeMessage<::ServerPushInterface::PoolFinishSession>(Arena*);
template<> ::ServerPushInterface::PoolMakeSession* Arena::CreateMaybeMessage<::ServerPushInterface::PoolMakeSession>(Arena*);
template<> ::ServerPushInterface::PoolMakeSession_Response* Arena::CreateMaybeMessage<::ServerPushInterface::PoolMakeSession_Response>(Arena*);
template<> ::ServerPushInterface::PoolMakeUnicast* Arena::CreateMaybeMessage<::ServerPushInterface::PoolMakeUnicast>(Arena*);
template<> ::ServerPushInterface::Pool_Response* Arena::CreateMaybeMessage<::ServerPushInterface::Pool_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ServerPushInterface {

enum PoolMakeUnicast_Type : int {
  PoolMakeUnicast_Type_Fallback = 0,
  PoolMakeUnicast_Type_Supplement = 1,
  PoolMakeUnicast_Type_PoolMakeUnicast_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PoolMakeUnicast_Type_PoolMakeUnicast_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PoolMakeUnicast_Type_IsValid(int value);
constexpr PoolMakeUnicast_Type PoolMakeUnicast_Type_Type_MIN = PoolMakeUnicast_Type_Fallback;
constexpr PoolMakeUnicast_Type PoolMakeUnicast_Type_Type_MAX = PoolMakeUnicast_Type_Supplement;
constexpr int PoolMakeUnicast_Type_Type_ARRAYSIZE = PoolMakeUnicast_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolMakeUnicast_Type_descriptor();
template<typename T>
inline const std::string& PoolMakeUnicast_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolMakeUnicast_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolMakeUnicast_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolMakeUnicast_Type_descriptor(), enum_t_value);
}
inline bool PoolMakeUnicast_Type_Parse(
    const std::string& name, PoolMakeUnicast_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolMakeUnicast_Type>(
    PoolMakeUnicast_Type_descriptor(), name, value);
}
// ===================================================================

class Pool_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.Pool.Response) */ {
 public:
  inline Pool_Response() : Pool_Response(nullptr) {};
  virtual ~Pool_Response();

  Pool_Response(const Pool_Response& from);
  Pool_Response(Pool_Response&& from) noexcept
    : Pool_Response() {
    *this = ::std::move(from);
  }

  inline Pool_Response& operator=(const Pool_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pool_Response& operator=(Pool_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pool_Response& default_instance();

  enum CommandResponseCase {
    kSession = 1,
    kMakeSession = 2,
    COMMANDRESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pool_Response* internal_default_instance() {
    return reinterpret_cast<const Pool_Response*>(
               &_Pool_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pool_Response& a, Pool_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Pool_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pool_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pool_Response* New() const final {
    return CreateMaybeMessage<Pool_Response>(nullptr);
  }

  Pool_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pool_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pool_Response& from);
  void MergeFrom(const Pool_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pool_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.Pool.Response";
  }
  protected:
  explicit Pool_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pool_2eproto);
    return ::descriptor_table_Pool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kMakeSessionFieldNumber = 2,
  };
  // .ServerPushInterface.Session.Response session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::ServerPushInterface::Session_Response& session() const;
  ::ServerPushInterface::Session_Response* release_session();
  ::ServerPushInterface::Session_Response* mutable_session();
  void set_allocated_session(::ServerPushInterface::Session_Response* session);
  private:
  const ::ServerPushInterface::Session_Response& _internal_session() const;
  ::ServerPushInterface::Session_Response* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::ServerPushInterface::Session_Response* session);
  ::ServerPushInterface::Session_Response* unsafe_arena_release_session();

  // .ServerPushInterface.PoolMakeSession.Response make_session = 2;
  bool has_make_session() const;
  private:
  bool _internal_has_make_session() const;
  public:
  void clear_make_session();
  const ::ServerPushInterface::PoolMakeSession_Response& make_session() const;
  ::ServerPushInterface::PoolMakeSession_Response* release_make_session();
  ::ServerPushInterface::PoolMakeSession_Response* mutable_make_session();
  void set_allocated_make_session(::ServerPushInterface::PoolMakeSession_Response* make_session);
  private:
  const ::ServerPushInterface::PoolMakeSession_Response& _internal_make_session() const;
  ::ServerPushInterface::PoolMakeSession_Response* _internal_mutable_make_session();
  public:
  void unsafe_arena_set_allocated_make_session(
      ::ServerPushInterface::PoolMakeSession_Response* make_session);
  ::ServerPushInterface::PoolMakeSession_Response* unsafe_arena_release_make_session();

  void clear_CommandResponse();
  CommandResponseCase CommandResponse_case() const;
  // @@protoc_insertion_point(class_scope:ServerPushInterface.Pool.Response)
 private:
  class _Internal;
  void set_has_session();
  void set_has_make_session();

  inline bool has_CommandResponse() const;
  inline void clear_has_CommandResponse();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CommandResponseUnion {
    CommandResponseUnion() {}
    ::ServerPushInterface::Session_Response* session_;
    ::ServerPushInterface::PoolMakeSession_Response* make_session_;
  } CommandResponse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Pool_2eproto;
};
// -------------------------------------------------------------------

class Pool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.Pool) */ {
 public:
  inline Pool() : Pool(nullptr) {};
  virtual ~Pool();

  Pool(const Pool& from);
  Pool(Pool&& from) noexcept
    : Pool() {
    *this = ::std::move(from);
  }

  inline Pool& operator=(const Pool& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pool& operator=(Pool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pool& default_instance();

  enum CommandCase {
    kSession = 2,
    kMakeSession = 3,
    kMakeUnicast = 4,
    kFinishSession = 5,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pool* internal_default_instance() {
    return reinterpret_cast<const Pool*>(
               &_Pool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pool& a, Pool& b) {
    a.Swap(&b);
  }
  inline void Swap(Pool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pool* New() const final {
    return CreateMaybeMessage<Pool>(nullptr);
  }

  Pool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pool& from);
  void MergeFrom(const Pool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.Pool";
  }
  protected:
  explicit Pool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pool_2eproto);
    return ::descriptor_table_Pool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Pool_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kPoolIdFieldNumber = 1,
    kSessionFieldNumber = 2,
    kMakeSessionFieldNumber = 3,
    kMakeUnicastFieldNumber = 4,
    kFinishSessionFieldNumber = 5,
  };
  // uint32 pool_id = 1;
  void clear_pool_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_id() const;
  void set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pool_id() const;
  void _internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .ServerPushInterface.Session session = 2;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::ServerPushInterface::Session& session() const;
  ::ServerPushInterface::Session* release_session();
  ::ServerPushInterface::Session* mutable_session();
  void set_allocated_session(::ServerPushInterface::Session* session);
  private:
  const ::ServerPushInterface::Session& _internal_session() const;
  ::ServerPushInterface::Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::ServerPushInterface::Session* session);
  ::ServerPushInterface::Session* unsafe_arena_release_session();

  // .ServerPushInterface.PoolMakeSession make_session = 3;
  bool has_make_session() const;
  private:
  bool _internal_has_make_session() const;
  public:
  void clear_make_session();
  const ::ServerPushInterface::PoolMakeSession& make_session() const;
  ::ServerPushInterface::PoolMakeSession* release_make_session();
  ::ServerPushInterface::PoolMakeSession* mutable_make_session();
  void set_allocated_make_session(::ServerPushInterface::PoolMakeSession* make_session);
  private:
  const ::ServerPushInterface::PoolMakeSession& _internal_make_session() const;
  ::ServerPushInterface::PoolMakeSession* _internal_mutable_make_session();
  public:
  void unsafe_arena_set_allocated_make_session(
      ::ServerPushInterface::PoolMakeSession* make_session);
  ::ServerPushInterface::PoolMakeSession* unsafe_arena_release_make_session();

  // .ServerPushInterface.PoolMakeUnicast make_unicast = 4;
  bool has_make_unicast() const;
  private:
  bool _internal_has_make_unicast() const;
  public:
  void clear_make_unicast();
  const ::ServerPushInterface::PoolMakeUnicast& make_unicast() const;
  ::ServerPushInterface::PoolMakeUnicast* release_make_unicast();
  ::ServerPushInterface::PoolMakeUnicast* mutable_make_unicast();
  void set_allocated_make_unicast(::ServerPushInterface::PoolMakeUnicast* make_unicast);
  private:
  const ::ServerPushInterface::PoolMakeUnicast& _internal_make_unicast() const;
  ::ServerPushInterface::PoolMakeUnicast* _internal_mutable_make_unicast();
  public:
  void unsafe_arena_set_allocated_make_unicast(
      ::ServerPushInterface::PoolMakeUnicast* make_unicast);
  ::ServerPushInterface::PoolMakeUnicast* unsafe_arena_release_make_unicast();

  // .ServerPushInterface.PoolFinishSession finish_session = 5;
  bool has_finish_session() const;
  private:
  bool _internal_has_finish_session() const;
  public:
  void clear_finish_session();
  const ::ServerPushInterface::PoolFinishSession& finish_session() const;
  ::ServerPushInterface::PoolFinishSession* release_finish_session();
  ::ServerPushInterface::PoolFinishSession* mutable_finish_session();
  void set_allocated_finish_session(::ServerPushInterface::PoolFinishSession* finish_session);
  private:
  const ::ServerPushInterface::PoolFinishSession& _internal_finish_session() const;
  ::ServerPushInterface::PoolFinishSession* _internal_mutable_finish_session();
  public:
  void unsafe_arena_set_allocated_finish_session(
      ::ServerPushInterface::PoolFinishSession* finish_session);
  ::ServerPushInterface::PoolFinishSession* unsafe_arena_release_finish_session();

  void clear_Command();
  CommandCase Command_case() const;
  // @@protoc_insertion_point(class_scope:ServerPushInterface.Pool)
 private:
  class _Internal;
  void set_has_session();
  void set_has_make_session();
  void set_has_make_unicast();
  void set_has_finish_session();

  inline bool has_Command() const;
  inline void clear_has_Command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_id_;
  union CommandUnion {
    CommandUnion() {}
    ::ServerPushInterface::Session* session_;
    ::ServerPushInterface::PoolMakeSession* make_session_;
    ::ServerPushInterface::PoolMakeUnicast* make_unicast_;
    ::ServerPushInterface::PoolFinishSession* finish_session_;
  } Command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Pool_2eproto;
};
// -------------------------------------------------------------------

class PoolFinishSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.PoolFinishSession) */ {
 public:
  inline PoolFinishSession() : PoolFinishSession(nullptr) {};
  virtual ~PoolFinishSession();

  PoolFinishSession(const PoolFinishSession& from);
  PoolFinishSession(PoolFinishSession&& from) noexcept
    : PoolFinishSession() {
    *this = ::std::move(from);
  }

  inline PoolFinishSession& operator=(const PoolFinishSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolFinishSession& operator=(PoolFinishSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolFinishSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolFinishSession* internal_default_instance() {
    return reinterpret_cast<const PoolFinishSession*>(
               &_PoolFinishSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PoolFinishSession& a, PoolFinishSession& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolFinishSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolFinishSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolFinishSession* New() const final {
    return CreateMaybeMessage<PoolFinishSession>(nullptr);
  }

  PoolFinishSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolFinishSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolFinishSession& from);
  void MergeFrom(const PoolFinishSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolFinishSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.PoolFinishSession";
  }
  protected:
  explicit PoolFinishSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pool_2eproto);
    return ::descriptor_table_Pool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // uint32 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerPushInterface.PoolFinishSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Pool_2eproto;
};
// -------------------------------------------------------------------

class PoolMakeSession_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.PoolMakeSession.Response) */ {
 public:
  inline PoolMakeSession_Response() : PoolMakeSession_Response(nullptr) {};
  virtual ~PoolMakeSession_Response();

  PoolMakeSession_Response(const PoolMakeSession_Response& from);
  PoolMakeSession_Response(PoolMakeSession_Response&& from) noexcept
    : PoolMakeSession_Response() {
    *this = ::std::move(from);
  }

  inline PoolMakeSession_Response& operator=(const PoolMakeSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolMakeSession_Response& operator=(PoolMakeSession_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolMakeSession_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolMakeSession_Response* internal_default_instance() {
    return reinterpret_cast<const PoolMakeSession_Response*>(
               &_PoolMakeSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PoolMakeSession_Response& a, PoolMakeSession_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolMakeSession_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolMakeSession_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolMakeSession_Response* New() const final {
    return CreateMaybeMessage<PoolMakeSession_Response>(nullptr);
  }

  PoolMakeSession_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolMakeSession_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolMakeSession_Response& from);
  void MergeFrom(const PoolMakeSession_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolMakeSession_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.PoolMakeSession.Response";
  }
  protected:
  explicit PoolMakeSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pool_2eproto);
    return ::descriptor_table_Pool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // uint32 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerPushInterface.PoolMakeSession.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Pool_2eproto;
};
// -------------------------------------------------------------------

class PoolMakeSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.PoolMakeSession) */ {
 public:
  inline PoolMakeSession() : PoolMakeSession(nullptr) {};
  virtual ~PoolMakeSession();

  PoolMakeSession(const PoolMakeSession& from);
  PoolMakeSession(PoolMakeSession&& from) noexcept
    : PoolMakeSession() {
    *this = ::std::move(from);
  }

  inline PoolMakeSession& operator=(const PoolMakeSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolMakeSession& operator=(PoolMakeSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolMakeSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolMakeSession* internal_default_instance() {
    return reinterpret_cast<const PoolMakeSession*>(
               &_PoolMakeSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PoolMakeSession& a, PoolMakeSession& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolMakeSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolMakeSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolMakeSession* New() const final {
    return CreateMaybeMessage<PoolMakeSession>(nullptr);
  }

  PoolMakeSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolMakeSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolMakeSession& from);
  void MergeFrom(const PoolMakeSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolMakeSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.PoolMakeSession";
  }
  protected:
  explicit PoolMakeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pool_2eproto);
    return ::descriptor_table_Pool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PoolMakeSession_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIpFieldNumber = 1,
    kGroupIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kMaxRateFieldNumber = 4,
    kMaxIdleFieldNumber = 5,
  };
  // bytes source_ip = 1;
  void clear_source_ip();
  const std::string& source_ip() const;
  void set_source_ip(const std::string& value);
  void set_source_ip(std::string&& value);
  void set_source_ip(const char* value);
  void set_source_ip(const void* value, size_t size);
  std::string* mutable_source_ip();
  std::string* release_source_ip();
  void set_allocated_source_ip(std::string* source_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_ip(
      std::string* source_ip);
  private:
  const std::string& _internal_source_ip() const;
  void _internal_set_source_ip(const std::string& value);
  std::string* _internal_mutable_source_ip();
  public:

  // bytes group_ip = 2;
  void clear_group_ip();
  const std::string& group_ip() const;
  void set_group_ip(const std::string& value);
  void set_group_ip(std::string&& value);
  void set_group_ip(const char* value);
  void set_group_ip(const void* value, size_t size);
  std::string* mutable_group_ip();
  std::string* release_group_ip();
  void set_allocated_group_ip(std::string* group_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_ip(
      std::string* group_ip);
  private:
  const std::string& _internal_group_ip() const;
  void _internal_set_group_ip(const std::string& value);
  std::string* _internal_mutable_group_ip();
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_rate = 4;
  void clear_max_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_rate() const;
  void set_max_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_rate() const;
  void _internal_set_max_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_idle = 5;
  void clear_max_idle();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_idle() const;
  void set_max_idle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_idle() const;
  void _internal_set_max_idle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerPushInterface.PoolMakeSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_idle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Pool_2eproto;
};
// -------------------------------------------------------------------

class PoolMakeUnicast PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.PoolMakeUnicast) */ {
 public:
  inline PoolMakeUnicast() : PoolMakeUnicast(nullptr) {};
  virtual ~PoolMakeUnicast();

  PoolMakeUnicast(const PoolMakeUnicast& from);
  PoolMakeUnicast(PoolMakeUnicast&& from) noexcept
    : PoolMakeUnicast() {
    *this = ::std::move(from);
  }

  inline PoolMakeUnicast& operator=(const PoolMakeUnicast& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolMakeUnicast& operator=(PoolMakeUnicast&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolMakeUnicast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolMakeUnicast* internal_default_instance() {
    return reinterpret_cast<const PoolMakeUnicast*>(
               &_PoolMakeUnicast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PoolMakeUnicast& a, PoolMakeUnicast& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolMakeUnicast* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolMakeUnicast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolMakeUnicast* New() const final {
    return CreateMaybeMessage<PoolMakeUnicast>(nullptr);
  }

  PoolMakeUnicast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolMakeUnicast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolMakeUnicast& from);
  void MergeFrom(const PoolMakeUnicast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolMakeUnicast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.PoolMakeUnicast";
  }
  protected:
  explicit PoolMakeUnicast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pool_2eproto);
    return ::descriptor_table_Pool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PoolMakeUnicast_Type Type;
  static constexpr Type Fallback =
    PoolMakeUnicast_Type_Fallback;
  static constexpr Type Supplement =
    PoolMakeUnicast_Type_Supplement;
  static inline bool Type_IsValid(int value) {
    return PoolMakeUnicast_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PoolMakeUnicast_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PoolMakeUnicast_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PoolMakeUnicast_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return PoolMakeUnicast_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PoolMakeUnicast_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return PoolMakeUnicast_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .ServerPushInterface.PoolMakeUnicast.Type type = 1;
  void clear_type();
  ::ServerPushInterface::PoolMakeUnicast_Type type() const;
  void set_type(::ServerPushInterface::PoolMakeUnicast_Type value);
  private:
  ::ServerPushInterface::PoolMakeUnicast_Type _internal_type() const;
  void _internal_set_type(::ServerPushInterface::PoolMakeUnicast_Type value);
  public:

  // @@protoc_insertion_point(class_scope:ServerPushInterface.PoolMakeUnicast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Pool_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pool_Response

// .ServerPushInterface.Session.Response session = 1;
inline bool Pool_Response::_internal_has_session() const {
  return CommandResponse_case() == kSession;
}
inline bool Pool_Response::has_session() const {
  return _internal_has_session();
}
inline void Pool_Response::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline ::ServerPushInterface::Session_Response* Pool_Response::release_session() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Pool.Response.session)
  if (_internal_has_session()) {
    clear_has_CommandResponse();
      ::ServerPushInterface::Session_Response* temp = CommandResponse_.session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CommandResponse_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::Session_Response& Pool_Response::_internal_session() const {
  return _internal_has_session()
      ? *CommandResponse_.session_
      : *reinterpret_cast< ::ServerPushInterface::Session_Response*>(&::ServerPushInterface::_Session_Response_default_instance_);
}
inline const ::ServerPushInterface::Session_Response& Pool_Response::session() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Pool.Response.session)
  return _internal_session();
}
inline ::ServerPushInterface::Session_Response* Pool_Response::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Pool.Response.session)
  if (_internal_has_session()) {
    clear_has_CommandResponse();
    ::ServerPushInterface::Session_Response* temp = CommandResponse_.session_;
    CommandResponse_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pool_Response::unsafe_arena_set_allocated_session(::ServerPushInterface::Session_Response* session) {
  clear_CommandResponse();
  if (session) {
    set_has_session();
    CommandResponse_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Pool.Response.session)
}
inline ::ServerPushInterface::Session_Response* Pool_Response::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_CommandResponse();
    set_has_session();
    CommandResponse_.session_ = CreateMaybeMessage< ::ServerPushInterface::Session_Response >(GetArena());
  }
  return CommandResponse_.session_;
}
inline ::ServerPushInterface::Session_Response* Pool_Response::mutable_session() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Pool.Response.session)
  return _internal_mutable_session();
}

// .ServerPushInterface.PoolMakeSession.Response make_session = 2;
inline bool Pool_Response::_internal_has_make_session() const {
  return CommandResponse_case() == kMakeSession;
}
inline bool Pool_Response::has_make_session() const {
  return _internal_has_make_session();
}
inline void Pool_Response::set_has_make_session() {
  _oneof_case_[0] = kMakeSession;
}
inline void Pool_Response::clear_make_session() {
  if (_internal_has_make_session()) {
    if (GetArena() == nullptr) {
      delete CommandResponse_.make_session_;
    }
    clear_has_CommandResponse();
  }
}
inline ::ServerPushInterface::PoolMakeSession_Response* Pool_Response::release_make_session() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Pool.Response.make_session)
  if (_internal_has_make_session()) {
    clear_has_CommandResponse();
      ::ServerPushInterface::PoolMakeSession_Response* temp = CommandResponse_.make_session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CommandResponse_.make_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::PoolMakeSession_Response& Pool_Response::_internal_make_session() const {
  return _internal_has_make_session()
      ? *CommandResponse_.make_session_
      : *reinterpret_cast< ::ServerPushInterface::PoolMakeSession_Response*>(&::ServerPushInterface::_PoolMakeSession_Response_default_instance_);
}
inline const ::ServerPushInterface::PoolMakeSession_Response& Pool_Response::make_session() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Pool.Response.make_session)
  return _internal_make_session();
}
inline ::ServerPushInterface::PoolMakeSession_Response* Pool_Response::unsafe_arena_release_make_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Pool.Response.make_session)
  if (_internal_has_make_session()) {
    clear_has_CommandResponse();
    ::ServerPushInterface::PoolMakeSession_Response* temp = CommandResponse_.make_session_;
    CommandResponse_.make_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pool_Response::unsafe_arena_set_allocated_make_session(::ServerPushInterface::PoolMakeSession_Response* make_session) {
  clear_CommandResponse();
  if (make_session) {
    set_has_make_session();
    CommandResponse_.make_session_ = make_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Pool.Response.make_session)
}
inline ::ServerPushInterface::PoolMakeSession_Response* Pool_Response::_internal_mutable_make_session() {
  if (!_internal_has_make_session()) {
    clear_CommandResponse();
    set_has_make_session();
    CommandResponse_.make_session_ = CreateMaybeMessage< ::ServerPushInterface::PoolMakeSession_Response >(GetArena());
  }
  return CommandResponse_.make_session_;
}
inline ::ServerPushInterface::PoolMakeSession_Response* Pool_Response::mutable_make_session() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Pool.Response.make_session)
  return _internal_mutable_make_session();
}

inline bool Pool_Response::has_CommandResponse() const {
  return CommandResponse_case() != COMMANDRESPONSE_NOT_SET;
}
inline void Pool_Response::clear_has_CommandResponse() {
  _oneof_case_[0] = COMMANDRESPONSE_NOT_SET;
}
inline Pool_Response::CommandResponseCase Pool_Response::CommandResponse_case() const {
  return Pool_Response::CommandResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Pool

// uint32 pool_id = 1;
inline void Pool::clear_pool_id() {
  pool_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pool::_internal_pool_id() const {
  return pool_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pool::pool_id() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Pool.pool_id)
  return _internal_pool_id();
}
inline void Pool::_internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pool_id_ = value;
}
inline void Pool::set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.Pool.pool_id)
}

// .ServerPushInterface.Session session = 2;
inline bool Pool::_internal_has_session() const {
  return Command_case() == kSession;
}
inline bool Pool::has_session() const {
  return _internal_has_session();
}
inline void Pool::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline ::ServerPushInterface::Session* Pool::release_session() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Pool.session)
  if (_internal_has_session()) {
    clear_has_Command();
      ::ServerPushInterface::Session* temp = Command_.session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::Session& Pool::_internal_session() const {
  return _internal_has_session()
      ? *Command_.session_
      : *reinterpret_cast< ::ServerPushInterface::Session*>(&::ServerPushInterface::_Session_default_instance_);
}
inline const ::ServerPushInterface::Session& Pool::session() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Pool.session)
  return _internal_session();
}
inline ::ServerPushInterface::Session* Pool::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Pool.session)
  if (_internal_has_session()) {
    clear_has_Command();
    ::ServerPushInterface::Session* temp = Command_.session_;
    Command_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pool::unsafe_arena_set_allocated_session(::ServerPushInterface::Session* session) {
  clear_Command();
  if (session) {
    set_has_session();
    Command_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Pool.session)
}
inline ::ServerPushInterface::Session* Pool::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_Command();
    set_has_session();
    Command_.session_ = CreateMaybeMessage< ::ServerPushInterface::Session >(GetArena());
  }
  return Command_.session_;
}
inline ::ServerPushInterface::Session* Pool::mutable_session() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Pool.session)
  return _internal_mutable_session();
}

// .ServerPushInterface.PoolMakeSession make_session = 3;
inline bool Pool::_internal_has_make_session() const {
  return Command_case() == kMakeSession;
}
inline bool Pool::has_make_session() const {
  return _internal_has_make_session();
}
inline void Pool::set_has_make_session() {
  _oneof_case_[0] = kMakeSession;
}
inline void Pool::clear_make_session() {
  if (_internal_has_make_session()) {
    if (GetArena() == nullptr) {
      delete Command_.make_session_;
    }
    clear_has_Command();
  }
}
inline ::ServerPushInterface::PoolMakeSession* Pool::release_make_session() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Pool.make_session)
  if (_internal_has_make_session()) {
    clear_has_Command();
      ::ServerPushInterface::PoolMakeSession* temp = Command_.make_session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.make_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::PoolMakeSession& Pool::_internal_make_session() const {
  return _internal_has_make_session()
      ? *Command_.make_session_
      : *reinterpret_cast< ::ServerPushInterface::PoolMakeSession*>(&::ServerPushInterface::_PoolMakeSession_default_instance_);
}
inline const ::ServerPushInterface::PoolMakeSession& Pool::make_session() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Pool.make_session)
  return _internal_make_session();
}
inline ::ServerPushInterface::PoolMakeSession* Pool::unsafe_arena_release_make_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Pool.make_session)
  if (_internal_has_make_session()) {
    clear_has_Command();
    ::ServerPushInterface::PoolMakeSession* temp = Command_.make_session_;
    Command_.make_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pool::unsafe_arena_set_allocated_make_session(::ServerPushInterface::PoolMakeSession* make_session) {
  clear_Command();
  if (make_session) {
    set_has_make_session();
    Command_.make_session_ = make_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Pool.make_session)
}
inline ::ServerPushInterface::PoolMakeSession* Pool::_internal_mutable_make_session() {
  if (!_internal_has_make_session()) {
    clear_Command();
    set_has_make_session();
    Command_.make_session_ = CreateMaybeMessage< ::ServerPushInterface::PoolMakeSession >(GetArena());
  }
  return Command_.make_session_;
}
inline ::ServerPushInterface::PoolMakeSession* Pool::mutable_make_session() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Pool.make_session)
  return _internal_mutable_make_session();
}

// .ServerPushInterface.PoolMakeUnicast make_unicast = 4;
inline bool Pool::_internal_has_make_unicast() const {
  return Command_case() == kMakeUnicast;
}
inline bool Pool::has_make_unicast() const {
  return _internal_has_make_unicast();
}
inline void Pool::set_has_make_unicast() {
  _oneof_case_[0] = kMakeUnicast;
}
inline void Pool::clear_make_unicast() {
  if (_internal_has_make_unicast()) {
    if (GetArena() == nullptr) {
      delete Command_.make_unicast_;
    }
    clear_has_Command();
  }
}
inline ::ServerPushInterface::PoolMakeUnicast* Pool::release_make_unicast() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Pool.make_unicast)
  if (_internal_has_make_unicast()) {
    clear_has_Command();
      ::ServerPushInterface::PoolMakeUnicast* temp = Command_.make_unicast_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.make_unicast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::PoolMakeUnicast& Pool::_internal_make_unicast() const {
  return _internal_has_make_unicast()
      ? *Command_.make_unicast_
      : *reinterpret_cast< ::ServerPushInterface::PoolMakeUnicast*>(&::ServerPushInterface::_PoolMakeUnicast_default_instance_);
}
inline const ::ServerPushInterface::PoolMakeUnicast& Pool::make_unicast() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Pool.make_unicast)
  return _internal_make_unicast();
}
inline ::ServerPushInterface::PoolMakeUnicast* Pool::unsafe_arena_release_make_unicast() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Pool.make_unicast)
  if (_internal_has_make_unicast()) {
    clear_has_Command();
    ::ServerPushInterface::PoolMakeUnicast* temp = Command_.make_unicast_;
    Command_.make_unicast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pool::unsafe_arena_set_allocated_make_unicast(::ServerPushInterface::PoolMakeUnicast* make_unicast) {
  clear_Command();
  if (make_unicast) {
    set_has_make_unicast();
    Command_.make_unicast_ = make_unicast;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Pool.make_unicast)
}
inline ::ServerPushInterface::PoolMakeUnicast* Pool::_internal_mutable_make_unicast() {
  if (!_internal_has_make_unicast()) {
    clear_Command();
    set_has_make_unicast();
    Command_.make_unicast_ = CreateMaybeMessage< ::ServerPushInterface::PoolMakeUnicast >(GetArena());
  }
  return Command_.make_unicast_;
}
inline ::ServerPushInterface::PoolMakeUnicast* Pool::mutable_make_unicast() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Pool.make_unicast)
  return _internal_mutable_make_unicast();
}

// .ServerPushInterface.PoolFinishSession finish_session = 5;
inline bool Pool::_internal_has_finish_session() const {
  return Command_case() == kFinishSession;
}
inline bool Pool::has_finish_session() const {
  return _internal_has_finish_session();
}
inline void Pool::set_has_finish_session() {
  _oneof_case_[0] = kFinishSession;
}
inline void Pool::clear_finish_session() {
  if (_internal_has_finish_session()) {
    if (GetArena() == nullptr) {
      delete Command_.finish_session_;
    }
    clear_has_Command();
  }
}
inline ::ServerPushInterface::PoolFinishSession* Pool::release_finish_session() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Pool.finish_session)
  if (_internal_has_finish_session()) {
    clear_has_Command();
      ::ServerPushInterface::PoolFinishSession* temp = Command_.finish_session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.finish_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::PoolFinishSession& Pool::_internal_finish_session() const {
  return _internal_has_finish_session()
      ? *Command_.finish_session_
      : *reinterpret_cast< ::ServerPushInterface::PoolFinishSession*>(&::ServerPushInterface::_PoolFinishSession_default_instance_);
}
inline const ::ServerPushInterface::PoolFinishSession& Pool::finish_session() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Pool.finish_session)
  return _internal_finish_session();
}
inline ::ServerPushInterface::PoolFinishSession* Pool::unsafe_arena_release_finish_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Pool.finish_session)
  if (_internal_has_finish_session()) {
    clear_has_Command();
    ::ServerPushInterface::PoolFinishSession* temp = Command_.finish_session_;
    Command_.finish_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pool::unsafe_arena_set_allocated_finish_session(::ServerPushInterface::PoolFinishSession* finish_session) {
  clear_Command();
  if (finish_session) {
    set_has_finish_session();
    Command_.finish_session_ = finish_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Pool.finish_session)
}
inline ::ServerPushInterface::PoolFinishSession* Pool::_internal_mutable_finish_session() {
  if (!_internal_has_finish_session()) {
    clear_Command();
    set_has_finish_session();
    Command_.finish_session_ = CreateMaybeMessage< ::ServerPushInterface::PoolFinishSession >(GetArena());
  }
  return Command_.finish_session_;
}
inline ::ServerPushInterface::PoolFinishSession* Pool::mutable_finish_session() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Pool.finish_session)
  return _internal_mutable_finish_session();
}

inline bool Pool::has_Command() const {
  return Command_case() != COMMAND_NOT_SET;
}
inline void Pool::clear_has_Command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline Pool::CommandCase Pool::Command_case() const {
  return Pool::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PoolFinishSession

// uint32 session_id = 1;
inline void PoolFinishSession::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolFinishSession::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolFinishSession::session_id() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.PoolFinishSession.session_id)
  return _internal_session_id();
}
inline void PoolFinishSession::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void PoolFinishSession::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.PoolFinishSession.session_id)
}

// -------------------------------------------------------------------

// PoolMakeSession_Response

// uint32 session_id = 1;
inline void PoolMakeSession_Response::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolMakeSession_Response::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolMakeSession_Response::session_id() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.PoolMakeSession.Response.session_id)
  return _internal_session_id();
}
inline void PoolMakeSession_Response::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void PoolMakeSession_Response::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.PoolMakeSession.Response.session_id)
}

// -------------------------------------------------------------------

// PoolMakeSession

// bytes source_ip = 1;
inline void PoolMakeSession::clear_source_ip() {
  source_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PoolMakeSession::source_ip() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.PoolMakeSession.source_ip)
  return _internal_source_ip();
}
inline void PoolMakeSession::set_source_ip(const std::string& value) {
  _internal_set_source_ip(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.PoolMakeSession.source_ip)
}
inline std::string* PoolMakeSession::mutable_source_ip() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.PoolMakeSession.source_ip)
  return _internal_mutable_source_ip();
}
inline const std::string& PoolMakeSession::_internal_source_ip() const {
  return source_ip_.Get();
}
inline void PoolMakeSession::_internal_set_source_ip(const std::string& value) {
  
  source_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PoolMakeSession::set_source_ip(std::string&& value) {
  
  source_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerPushInterface.PoolMakeSession.source_ip)
}
inline void PoolMakeSession::set_source_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServerPushInterface.PoolMakeSession.source_ip)
}
inline void PoolMakeSession::set_source_ip(const void* value,
    size_t size) {
  
  source_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerPushInterface.PoolMakeSession.source_ip)
}
inline std::string* PoolMakeSession::_internal_mutable_source_ip() {
  
  return source_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PoolMakeSession::release_source_ip() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.PoolMakeSession.source_ip)
  return source_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PoolMakeSession::set_allocated_source_ip(std::string* source_ip) {
  if (source_ip != nullptr) {
    
  } else {
    
  }
  source_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.PoolMakeSession.source_ip)
}
inline std::string* PoolMakeSession::unsafe_arena_release_source_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.PoolMakeSession.source_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PoolMakeSession::unsafe_arena_set_allocated_source_ip(
    std::string* source_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_ip != nullptr) {
    
  } else {
    
  }
  source_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.PoolMakeSession.source_ip)
}

// bytes group_ip = 2;
inline void PoolMakeSession::clear_group_ip() {
  group_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PoolMakeSession::group_ip() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.PoolMakeSession.group_ip)
  return _internal_group_ip();
}
inline void PoolMakeSession::set_group_ip(const std::string& value) {
  _internal_set_group_ip(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.PoolMakeSession.group_ip)
}
inline std::string* PoolMakeSession::mutable_group_ip() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.PoolMakeSession.group_ip)
  return _internal_mutable_group_ip();
}
inline const std::string& PoolMakeSession::_internal_group_ip() const {
  return group_ip_.Get();
}
inline void PoolMakeSession::_internal_set_group_ip(const std::string& value) {
  
  group_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PoolMakeSession::set_group_ip(std::string&& value) {
  
  group_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerPushInterface.PoolMakeSession.group_ip)
}
inline void PoolMakeSession::set_group_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServerPushInterface.PoolMakeSession.group_ip)
}
inline void PoolMakeSession::set_group_ip(const void* value,
    size_t size) {
  
  group_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerPushInterface.PoolMakeSession.group_ip)
}
inline std::string* PoolMakeSession::_internal_mutable_group_ip() {
  
  return group_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PoolMakeSession::release_group_ip() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.PoolMakeSession.group_ip)
  return group_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PoolMakeSession::set_allocated_group_ip(std::string* group_ip) {
  if (group_ip != nullptr) {
    
  } else {
    
  }
  group_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.PoolMakeSession.group_ip)
}
inline std::string* PoolMakeSession::unsafe_arena_release_group_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.PoolMakeSession.group_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PoolMakeSession::unsafe_arena_set_allocated_group_ip(
    std::string* group_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group_ip != nullptr) {
    
  } else {
    
  }
  group_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.PoolMakeSession.group_ip)
}

// uint32 port = 3;
inline void PoolMakeSession::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolMakeSession::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolMakeSession::port() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.PoolMakeSession.port)
  return _internal_port();
}
inline void PoolMakeSession::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void PoolMakeSession::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.PoolMakeSession.port)
}

// uint32 max_rate = 4;
inline void PoolMakeSession::clear_max_rate() {
  max_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolMakeSession::_internal_max_rate() const {
  return max_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolMakeSession::max_rate() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.PoolMakeSession.max_rate)
  return _internal_max_rate();
}
inline void PoolMakeSession::_internal_set_max_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_rate_ = value;
}
inline void PoolMakeSession::set_max_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_rate(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.PoolMakeSession.max_rate)
}

// uint32 max_idle = 5;
inline void PoolMakeSession::clear_max_idle() {
  max_idle_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolMakeSession::_internal_max_idle() const {
  return max_idle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolMakeSession::max_idle() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.PoolMakeSession.max_idle)
  return _internal_max_idle();
}
inline void PoolMakeSession::_internal_set_max_idle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_idle_ = value;
}
inline void PoolMakeSession::set_max_idle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_idle(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.PoolMakeSession.max_idle)
}

// -------------------------------------------------------------------

// PoolMakeUnicast

// .ServerPushInterface.PoolMakeUnicast.Type type = 1;
inline void PoolMakeUnicast::clear_type() {
  type_ = 0;
}
inline ::ServerPushInterface::PoolMakeUnicast_Type PoolMakeUnicast::_internal_type() const {
  return static_cast< ::ServerPushInterface::PoolMakeUnicast_Type >(type_);
}
inline ::ServerPushInterface::PoolMakeUnicast_Type PoolMakeUnicast::type() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.PoolMakeUnicast.type)
  return _internal_type();
}
inline void PoolMakeUnicast::_internal_set_type(::ServerPushInterface::PoolMakeUnicast_Type value) {
  
  type_ = value;
}
inline void PoolMakeUnicast::set_type(::ServerPushInterface::PoolMakeUnicast_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.PoolMakeUnicast.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerPushInterface

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ServerPushInterface::PoolMakeUnicast_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerPushInterface::PoolMakeUnicast_Type>() {
  return ::ServerPushInterface::PoolMakeUnicast_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Pool_2eproto
