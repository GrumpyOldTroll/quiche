// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pool.proto

#include "Pool.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Pool_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolFinishSession_Pool_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pool_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolMakeSession_Pool_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pool_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolMakeSession_Response_Pool_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pool_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolMakeUnicast_Pool_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Session_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Session_Session_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Session_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Session_Response_Session_2eproto;
namespace ServerPushInterface {
class Pool_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pool_Response> _instance;
  const ::ServerPushInterface::Session_Response* session_;
  const ::ServerPushInterface::PoolMakeSession_Response* make_session_;
} _Pool_Response_default_instance_;
class PoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pool> _instance;
  const ::ServerPushInterface::Session* session_;
  const ::ServerPushInterface::PoolMakeSession* make_session_;
  const ::ServerPushInterface::PoolMakeUnicast* make_unicast_;
  const ::ServerPushInterface::PoolFinishSession* finish_session_;
} _Pool_default_instance_;
class PoolFinishSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolFinishSession> _instance;
} _PoolFinishSession_default_instance_;
class PoolMakeSession_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolMakeSession_Response> _instance;
} _PoolMakeSession_Response_default_instance_;
class PoolMakeSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolMakeSession> _instance;
} _PoolMakeSession_default_instance_;
class PoolMakeUnicastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolMakeUnicast> _instance;
} _PoolMakeUnicast_default_instance_;
}  // namespace ServerPushInterface
static void InitDefaultsscc_info_Pool_Pool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_Pool_default_instance_;
    new (ptr) ::ServerPushInterface::Pool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::Pool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Pool_Pool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Pool_Pool_2eproto}, {
      &scc_info_Session_Session_2eproto.base,
      &scc_info_PoolMakeSession_Pool_2eproto.base,
      &scc_info_PoolMakeUnicast_Pool_2eproto.base,
      &scc_info_PoolFinishSession_Pool_2eproto.base,}};

static void InitDefaultsscc_info_Pool_Response_Pool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_Pool_Response_default_instance_;
    new (ptr) ::ServerPushInterface::Pool_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::Pool_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pool_Response_Pool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Pool_Response_Pool_2eproto}, {
      &scc_info_Session_Response_Session_2eproto.base,
      &scc_info_PoolMakeSession_Response_Pool_2eproto.base,}};

static void InitDefaultsscc_info_PoolFinishSession_Pool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_PoolFinishSession_default_instance_;
    new (ptr) ::ServerPushInterface::PoolFinishSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::PoolFinishSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolFinishSession_Pool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolFinishSession_Pool_2eproto}, {}};

static void InitDefaultsscc_info_PoolMakeSession_Pool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_PoolMakeSession_default_instance_;
    new (ptr) ::ServerPushInterface::PoolMakeSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::PoolMakeSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolMakeSession_Pool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolMakeSession_Pool_2eproto}, {}};

static void InitDefaultsscc_info_PoolMakeSession_Response_Pool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_PoolMakeSession_Response_default_instance_;
    new (ptr) ::ServerPushInterface::PoolMakeSession_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::PoolMakeSession_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolMakeSession_Response_Pool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolMakeSession_Response_Pool_2eproto}, {}};

static void InitDefaultsscc_info_PoolMakeUnicast_Pool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_PoolMakeUnicast_default_instance_;
    new (ptr) ::ServerPushInterface::PoolMakeUnicast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::PoolMakeUnicast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolMakeUnicast_Pool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolMakeUnicast_Pool_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Pool_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Pool_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Pool_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Pool_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Pool_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Pool_Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ServerPushInterface::Pool_ResponseDefaultTypeInternal, session_),
  offsetof(::ServerPushInterface::Pool_ResponseDefaultTypeInternal, make_session_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Pool_Response, CommandResponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Pool, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Pool, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Pool, pool_id_),
  offsetof(::ServerPushInterface::PoolDefaultTypeInternal, session_),
  offsetof(::ServerPushInterface::PoolDefaultTypeInternal, make_session_),
  offsetof(::ServerPushInterface::PoolDefaultTypeInternal, make_unicast_),
  offsetof(::ServerPushInterface::PoolDefaultTypeInternal, finish_session_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Pool, Command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolFinishSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolFinishSession, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeSession_Response, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeSession, source_ip_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeSession, group_ip_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeSession, port_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeSession, max_rate_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeSession, max_idle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeUnicast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::PoolMakeUnicast, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ServerPushInterface::Pool_Response)},
  { 8, -1, sizeof(::ServerPushInterface::Pool)},
  { 19, -1, sizeof(::ServerPushInterface::PoolFinishSession)},
  { 25, -1, sizeof(::ServerPushInterface::PoolMakeSession_Response)},
  { 31, -1, sizeof(::ServerPushInterface::PoolMakeSession)},
  { 41, -1, sizeof(::ServerPushInterface::PoolMakeUnicast)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_Pool_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_Pool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_PoolFinishSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_PoolMakeSession_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_PoolMakeSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_PoolMakeUnicast_default_instance_),
};

const char descriptor_table_protodef_Pool_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nPool.proto\022\023ServerPushInterface\032\rSessi"
  "on.proto\"\262\003\n\004Pool\022\017\n\007pool_id\030\001 \001(\r\022/\n\007se"
  "ssion\030\002 \001(\0132\034.ServerPushInterface.Sessio"
  "nH\000\022<\n\014make_session\030\003 \001(\0132$.ServerPushIn"
  "terface.PoolMakeSessionH\000\022<\n\014make_unicas"
  "t\030\004 \001(\0132$.ServerPushInterface.PoolMakeUn"
  "icastH\000\022@\n\016finish_session\030\005 \001(\0132&.Server"
  "PushInterface.PoolFinishSessionH\000\032\236\001\n\010Re"
  "sponse\0228\n\007session\030\001 \001(\0132%.ServerPushInte"
  "rface.Session.ResponseH\000\022E\n\014make_session"
  "\030\002 \001(\0132-.ServerPushInterface.PoolMakeSes"
  "sion.ResponseH\000B\021\n\017CommandResponseB\t\n\007Co"
  "mmand\"\'\n\021PoolFinishSession\022\022\n\nsession_id"
  "\030\001 \001(\r\"\210\001\n\017PoolMakeSession\022\021\n\tsource_ip\030"
  "\001 \001(\014\022\020\n\010group_ip\030\002 \001(\014\022\014\n\004port\030\003 \001(\r\022\020\n"
  "\010max_rate\030\004 \001(\r\022\020\n\010max_idle\030\005 \001(\r\032\036\n\010Res"
  "ponse\022\022\n\nsession_id\030\001 \001(\r\"p\n\017PoolMakeUni"
  "cast\0227\n\004type\030\001 \001(\0162).ServerPushInterface"
  ".PoolMakeUnicast.Type\"$\n\004Type\022\014\n\010Fallbac"
  "k\020\000\022\016\n\nSupplement\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Pool_2eproto_deps[1] = {
  &::descriptor_table_Session_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Pool_2eproto_sccs[6] = {
  &scc_info_Pool_Pool_2eproto.base,
  &scc_info_Pool_Response_Pool_2eproto.base,
  &scc_info_PoolFinishSession_Pool_2eproto.base,
  &scc_info_PoolMakeSession_Pool_2eproto.base,
  &scc_info_PoolMakeSession_Response_Pool_2eproto.base,
  &scc_info_PoolMakeUnicast_Pool_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Pool_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Pool_2eproto = {
  false, false, descriptor_table_protodef_Pool_2eproto, "Pool.proto", 787,
  &descriptor_table_Pool_2eproto_once, descriptor_table_Pool_2eproto_sccs, descriptor_table_Pool_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_Pool_2eproto::offsets,
  file_level_metadata_Pool_2eproto, 6, file_level_enum_descriptors_Pool_2eproto, file_level_service_descriptors_Pool_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Pool_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Pool_2eproto)), true);
namespace ServerPushInterface {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolMakeUnicast_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Pool_2eproto);
  return file_level_enum_descriptors_Pool_2eproto[0];
}
bool PoolMakeUnicast_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PoolMakeUnicast_Type PoolMakeUnicast::Fallback;
constexpr PoolMakeUnicast_Type PoolMakeUnicast::Supplement;
constexpr PoolMakeUnicast_Type PoolMakeUnicast::Type_MIN;
constexpr PoolMakeUnicast_Type PoolMakeUnicast::Type_MAX;
constexpr int PoolMakeUnicast::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Pool_Response::InitAsDefaultInstance() {
  ::ServerPushInterface::_Pool_Response_default_instance_.session_ = const_cast< ::ServerPushInterface::Session_Response*>(
      ::ServerPushInterface::Session_Response::internal_default_instance());
  ::ServerPushInterface::_Pool_Response_default_instance_.make_session_ = const_cast< ::ServerPushInterface::PoolMakeSession_Response*>(
      ::ServerPushInterface::PoolMakeSession_Response::internal_default_instance());
}
class Pool_Response::_Internal {
 public:
  static const ::ServerPushInterface::Session_Response& session(const Pool_Response* msg);
  static const ::ServerPushInterface::PoolMakeSession_Response& make_session(const Pool_Response* msg);
};

const ::ServerPushInterface::Session_Response&
Pool_Response::_Internal::session(const Pool_Response* msg) {
  return *msg->CommandResponse_.session_;
}
const ::ServerPushInterface::PoolMakeSession_Response&
Pool_Response::_Internal::make_session(const Pool_Response* msg) {
  return *msg->CommandResponse_.make_session_;
}
void Pool_Response::set_allocated_session(::ServerPushInterface::Session_Response* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_CommandResponse();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session)->GetArena();
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    CommandResponse_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Pool.Response.session)
}
void Pool_Response::clear_session() {
  if (_internal_has_session()) {
    if (GetArena() == nullptr) {
      delete CommandResponse_.session_;
    }
    clear_has_CommandResponse();
  }
}
void Pool_Response::set_allocated_make_session(::ServerPushInterface::PoolMakeSession_Response* make_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_CommandResponse();
  if (make_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(make_session);
    if (message_arena != submessage_arena) {
      make_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_session, submessage_arena);
    }
    set_has_make_session();
    CommandResponse_.make_session_ = make_session;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Pool.Response.make_session)
}
Pool_Response::Pool_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.Pool.Response)
}
Pool_Response::Pool_Response(const Pool_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_CommandResponse();
  switch (from.CommandResponse_case()) {
    case kSession: {
      _internal_mutable_session()->::ServerPushInterface::Session_Response::MergeFrom(from._internal_session());
      break;
    }
    case kMakeSession: {
      _internal_mutable_make_session()->::ServerPushInterface::PoolMakeSession_Response::MergeFrom(from._internal_make_session());
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.Pool.Response)
}

void Pool_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pool_Response_Pool_2eproto.base);
  clear_has_CommandResponse();
}

Pool_Response::~Pool_Response() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.Pool.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pool_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_CommandResponse()) {
    clear_CommandResponse();
  }
}

void Pool_Response::ArenaDtor(void* object) {
  Pool_Response* _this = reinterpret_cast< Pool_Response* >(object);
  (void)_this;
}
void Pool_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pool_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pool_Response& Pool_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pool_Response_Pool_2eproto.base);
  return *internal_default_instance();
}


void Pool_Response::clear_CommandResponse() {
// @@protoc_insertion_point(one_of_clear_start:ServerPushInterface.Pool.Response)
  switch (CommandResponse_case()) {
    case kSession: {
      if (GetArena() == nullptr) {
        delete CommandResponse_.session_;
      }
      break;
    }
    case kMakeSession: {
      if (GetArena() == nullptr) {
        delete CommandResponse_.make_session_;
      }
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMANDRESPONSE_NOT_SET;
}


void Pool_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.Pool.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_CommandResponse();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pool_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServerPushInterface.Session.Response session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.PoolMakeSession.Response make_session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pool_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.Pool.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerPushInterface.Session.Response session = 1;
  if (_internal_has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::session(this), target, stream);
  }

  // .ServerPushInterface.PoolMakeSession.Response make_session = 2;
  if (_internal_has_make_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::make_session(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.Pool.Response)
  return target;
}

size_t Pool_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.Pool.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (CommandResponse_case()) {
    // .ServerPushInterface.Session.Response session = 1;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CommandResponse_.session_);
      break;
    }
    // .ServerPushInterface.PoolMakeSession.Response make_session = 2;
    case kMakeSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CommandResponse_.make_session_);
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pool_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.Pool.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Pool_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pool_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.Pool.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.Pool.Response)
    MergeFrom(*source);
  }
}

void Pool_Response::MergeFrom(const Pool_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.Pool.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.CommandResponse_case()) {
    case kSession: {
      _internal_mutable_session()->::ServerPushInterface::Session_Response::MergeFrom(from._internal_session());
      break;
    }
    case kMakeSession: {
      _internal_mutable_make_session()->::ServerPushInterface::PoolMakeSession_Response::MergeFrom(from._internal_make_session());
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
}

void Pool_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.Pool.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pool_Response::CopyFrom(const Pool_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.Pool.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pool_Response::IsInitialized() const {
  return true;
}

void Pool_Response::InternalSwap(Pool_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(CommandResponse_, other->CommandResponse_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pool_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pool::InitAsDefaultInstance() {
  ::ServerPushInterface::_Pool_default_instance_.session_ = const_cast< ::ServerPushInterface::Session*>(
      ::ServerPushInterface::Session::internal_default_instance());
  ::ServerPushInterface::_Pool_default_instance_.make_session_ = const_cast< ::ServerPushInterface::PoolMakeSession*>(
      ::ServerPushInterface::PoolMakeSession::internal_default_instance());
  ::ServerPushInterface::_Pool_default_instance_.make_unicast_ = const_cast< ::ServerPushInterface::PoolMakeUnicast*>(
      ::ServerPushInterface::PoolMakeUnicast::internal_default_instance());
  ::ServerPushInterface::_Pool_default_instance_.finish_session_ = const_cast< ::ServerPushInterface::PoolFinishSession*>(
      ::ServerPushInterface::PoolFinishSession::internal_default_instance());
}
class Pool::_Internal {
 public:
  static const ::ServerPushInterface::Session& session(const Pool* msg);
  static const ::ServerPushInterface::PoolMakeSession& make_session(const Pool* msg);
  static const ::ServerPushInterface::PoolMakeUnicast& make_unicast(const Pool* msg);
  static const ::ServerPushInterface::PoolFinishSession& finish_session(const Pool* msg);
};

const ::ServerPushInterface::Session&
Pool::_Internal::session(const Pool* msg) {
  return *msg->Command_.session_;
}
const ::ServerPushInterface::PoolMakeSession&
Pool::_Internal::make_session(const Pool* msg) {
  return *msg->Command_.make_session_;
}
const ::ServerPushInterface::PoolMakeUnicast&
Pool::_Internal::make_unicast(const Pool* msg) {
  return *msg->Command_.make_unicast_;
}
const ::ServerPushInterface::PoolFinishSession&
Pool::_Internal::finish_session(const Pool* msg) {
  return *msg->Command_.finish_session_;
}
void Pool::set_allocated_session(::ServerPushInterface::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session)->GetArena();
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    Command_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Pool.session)
}
void Pool::clear_session() {
  if (_internal_has_session()) {
    if (GetArena() == nullptr) {
      delete Command_.session_;
    }
    clear_has_Command();
  }
}
void Pool::set_allocated_make_session(::ServerPushInterface::PoolMakeSession* make_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (make_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(make_session);
    if (message_arena != submessage_arena) {
      make_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_session, submessage_arena);
    }
    set_has_make_session();
    Command_.make_session_ = make_session;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Pool.make_session)
}
void Pool::set_allocated_make_unicast(::ServerPushInterface::PoolMakeUnicast* make_unicast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (make_unicast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(make_unicast);
    if (message_arena != submessage_arena) {
      make_unicast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_unicast, submessage_arena);
    }
    set_has_make_unicast();
    Command_.make_unicast_ = make_unicast;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Pool.make_unicast)
}
void Pool::set_allocated_finish_session(::ServerPushInterface::PoolFinishSession* finish_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (finish_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(finish_session);
    if (message_arena != submessage_arena) {
      finish_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_session, submessage_arena);
    }
    set_has_finish_session();
    Command_.finish_session_ = finish_session;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Pool.finish_session)
}
Pool::Pool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.Pool)
}
Pool::Pool(const Pool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_id_ = from.pool_id_;
  clear_has_Command();
  switch (from.Command_case()) {
    case kSession: {
      _internal_mutable_session()->::ServerPushInterface::Session::MergeFrom(from._internal_session());
      break;
    }
    case kMakeSession: {
      _internal_mutable_make_session()->::ServerPushInterface::PoolMakeSession::MergeFrom(from._internal_make_session());
      break;
    }
    case kMakeUnicast: {
      _internal_mutable_make_unicast()->::ServerPushInterface::PoolMakeUnicast::MergeFrom(from._internal_make_unicast());
      break;
    }
    case kFinishSession: {
      _internal_mutable_finish_session()->::ServerPushInterface::PoolFinishSession::MergeFrom(from._internal_finish_session());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.Pool)
}

void Pool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pool_Pool_2eproto.base);
  pool_id_ = 0u;
  clear_has_Command();
}

Pool::~Pool() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.Pool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Command()) {
    clear_Command();
  }
}

void Pool::ArenaDtor(void* object) {
  Pool* _this = reinterpret_cast< Pool* >(object);
  (void)_this;
}
void Pool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pool& Pool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pool_Pool_2eproto.base);
  return *internal_default_instance();
}


void Pool::clear_Command() {
// @@protoc_insertion_point(one_of_clear_start:ServerPushInterface.Pool)
  switch (Command_case()) {
    case kSession: {
      if (GetArena() == nullptr) {
        delete Command_.session_;
      }
      break;
    }
    case kMakeSession: {
      if (GetArena() == nullptr) {
        delete Command_.make_session_;
      }
      break;
    }
    case kMakeUnicast: {
      if (GetArena() == nullptr) {
        delete Command_.make_unicast_;
      }
      break;
    }
    case kFinishSession: {
      if (GetArena() == nullptr) {
        delete Command_.finish_session_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Pool::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.Pool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_id_ = 0u;
  clear_Command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pool_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.Session session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.PoolMakeSession make_session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.PoolMakeUnicast make_unicast = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_unicast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.PoolFinishSession finish_session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_finish_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.Pool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pool_id(), target);
  }

  // .ServerPushInterface.Session session = 2;
  if (_internal_has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::session(this), target, stream);
  }

  // .ServerPushInterface.PoolMakeSession make_session = 3;
  if (_internal_has_make_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::make_session(this), target, stream);
  }

  // .ServerPushInterface.PoolMakeUnicast make_unicast = 4;
  if (_internal_has_make_unicast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::make_unicast(this), target, stream);
  }

  // .ServerPushInterface.PoolFinishSession finish_session = 5;
  if (_internal_has_finish_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::finish_session(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.Pool)
  return target;
}

size_t Pool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.Pool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pool_id());
  }

  switch (Command_case()) {
    // .ServerPushInterface.Session session = 2;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.session_);
      break;
    }
    // .ServerPushInterface.PoolMakeSession make_session = 3;
    case kMakeSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.make_session_);
      break;
    }
    // .ServerPushInterface.PoolMakeUnicast make_unicast = 4;
    case kMakeUnicast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.make_unicast_);
      break;
    }
    // .ServerPushInterface.PoolFinishSession finish_session = 5;
    case kFinishSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.finish_session_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.Pool)
  GOOGLE_DCHECK_NE(&from, this);
  const Pool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.Pool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.Pool)
    MergeFrom(*source);
  }
}

void Pool::MergeFrom(const Pool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.Pool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  switch (from.Command_case()) {
    case kSession: {
      _internal_mutable_session()->::ServerPushInterface::Session::MergeFrom(from._internal_session());
      break;
    }
    case kMakeSession: {
      _internal_mutable_make_session()->::ServerPushInterface::PoolMakeSession::MergeFrom(from._internal_make_session());
      break;
    }
    case kMakeUnicast: {
      _internal_mutable_make_unicast()->::ServerPushInterface::PoolMakeUnicast::MergeFrom(from._internal_make_unicast());
      break;
    }
    case kFinishSession: {
      _internal_mutable_finish_session()->::ServerPushInterface::PoolFinishSession::MergeFrom(from._internal_finish_session());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void Pool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.Pool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pool::CopyFrom(const Pool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.Pool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pool::IsInitialized() const {
  return true;
}

void Pool::InternalSwap(Pool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pool_id_, other->pool_id_);
  swap(Command_, other->Command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolFinishSession::InitAsDefaultInstance() {
}
class PoolFinishSession::_Internal {
 public:
};

PoolFinishSession::PoolFinishSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.PoolFinishSession)
}
PoolFinishSession::PoolFinishSession(const PoolFinishSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.PoolFinishSession)
}

void PoolFinishSession::SharedCtor() {
  session_id_ = 0u;
}

PoolFinishSession::~PoolFinishSession() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.PoolFinishSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoolFinishSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoolFinishSession::ArenaDtor(void* object) {
  PoolFinishSession* _this = reinterpret_cast< PoolFinishSession* >(object);
  (void)_this;
}
void PoolFinishSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoolFinishSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolFinishSession& PoolFinishSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolFinishSession_Pool_2eproto.base);
  return *internal_default_instance();
}


void PoolFinishSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.PoolFinishSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoolFinishSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolFinishSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.PoolFinishSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.PoolFinishSession)
  return target;
}

size_t PoolFinishSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.PoolFinishSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolFinishSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.PoolFinishSession)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolFinishSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolFinishSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.PoolFinishSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.PoolFinishSession)
    MergeFrom(*source);
  }
}

void PoolFinishSession::MergeFrom(const PoolFinishSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.PoolFinishSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void PoolFinishSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.PoolFinishSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolFinishSession::CopyFrom(const PoolFinishSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.PoolFinishSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolFinishSession::IsInitialized() const {
  return true;
}

void PoolFinishSession::InternalSwap(PoolFinishSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolFinishSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolMakeSession_Response::InitAsDefaultInstance() {
}
class PoolMakeSession_Response::_Internal {
 public:
};

PoolMakeSession_Response::PoolMakeSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.PoolMakeSession.Response)
}
PoolMakeSession_Response::PoolMakeSession_Response(const PoolMakeSession_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.PoolMakeSession.Response)
}

void PoolMakeSession_Response::SharedCtor() {
  session_id_ = 0u;
}

PoolMakeSession_Response::~PoolMakeSession_Response() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.PoolMakeSession.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoolMakeSession_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoolMakeSession_Response::ArenaDtor(void* object) {
  PoolMakeSession_Response* _this = reinterpret_cast< PoolMakeSession_Response* >(object);
  (void)_this;
}
void PoolMakeSession_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoolMakeSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolMakeSession_Response& PoolMakeSession_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolMakeSession_Response_Pool_2eproto.base);
  return *internal_default_instance();
}


void PoolMakeSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.PoolMakeSession.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoolMakeSession_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolMakeSession_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.PoolMakeSession.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.PoolMakeSession.Response)
  return target;
}

size_t PoolMakeSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.PoolMakeSession.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolMakeSession_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.PoolMakeSession.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolMakeSession_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolMakeSession_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.PoolMakeSession.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.PoolMakeSession.Response)
    MergeFrom(*source);
  }
}

void PoolMakeSession_Response::MergeFrom(const PoolMakeSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.PoolMakeSession.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void PoolMakeSession_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.PoolMakeSession.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolMakeSession_Response::CopyFrom(const PoolMakeSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.PoolMakeSession.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolMakeSession_Response::IsInitialized() const {
  return true;
}

void PoolMakeSession_Response::InternalSwap(PoolMakeSession_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolMakeSession_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolMakeSession::InitAsDefaultInstance() {
}
class PoolMakeSession::_Internal {
 public:
};

PoolMakeSession::PoolMakeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.PoolMakeSession)
}
PoolMakeSession::PoolMakeSession(const PoolMakeSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_ip().empty()) {
    source_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_ip(),
      GetArena());
  }
  group_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_ip().empty()) {
    group_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_ip(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_idle_) -
    reinterpret_cast<char*>(&port_)) + sizeof(max_idle_));
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.PoolMakeSession)
}

void PoolMakeSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoolMakeSession_Pool_2eproto.base);
  source_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_idle_) -
      reinterpret_cast<char*>(&port_)) + sizeof(max_idle_));
}

PoolMakeSession::~PoolMakeSession() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.PoolMakeSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoolMakeSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PoolMakeSession::ArenaDtor(void* object) {
  PoolMakeSession* _this = reinterpret_cast< PoolMakeSession* >(object);
  (void)_this;
}
void PoolMakeSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoolMakeSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolMakeSession& PoolMakeSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolMakeSession_Pool_2eproto.base);
  return *internal_default_instance();
}


void PoolMakeSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.PoolMakeSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_idle_) -
      reinterpret_cast<char*>(&port_)) + sizeof(max_idle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoolMakeSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes source_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes group_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_idle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolMakeSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.PoolMakeSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes source_ip = 1;
  if (this->source_ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_source_ip(), target);
  }

  // bytes group_ip = 2;
  if (this->group_ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_group_ip(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // uint32 max_rate = 4;
  if (this->max_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_rate(), target);
  }

  // uint32 max_idle = 5;
  if (this->max_idle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_idle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.PoolMakeSession)
  return target;
}

size_t PoolMakeSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.PoolMakeSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes source_ip = 1;
  if (this->source_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source_ip());
  }

  // bytes group_ip = 2;
  if (this->group_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_group_ip());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 max_rate = 4;
  if (this->max_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_rate());
  }

  // uint32 max_idle = 5;
  if (this->max_idle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_idle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolMakeSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.PoolMakeSession)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolMakeSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolMakeSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.PoolMakeSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.PoolMakeSession)
    MergeFrom(*source);
  }
}

void PoolMakeSession::MergeFrom(const PoolMakeSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.PoolMakeSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_ip().size() > 0) {
    _internal_set_source_ip(from._internal_source_ip());
  }
  if (from.group_ip().size() > 0) {
    _internal_set_group_ip(from._internal_group_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.max_rate() != 0) {
    _internal_set_max_rate(from._internal_max_rate());
  }
  if (from.max_idle() != 0) {
    _internal_set_max_idle(from._internal_max_idle());
  }
}

void PoolMakeSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.PoolMakeSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolMakeSession::CopyFrom(const PoolMakeSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.PoolMakeSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolMakeSession::IsInitialized() const {
  return true;
}

void PoolMakeSession::InternalSwap(PoolMakeSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_ip_.Swap(&other->source_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_ip_.Swap(&other->group_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoolMakeSession, max_idle_)
      + sizeof(PoolMakeSession::max_idle_)
      - PROTOBUF_FIELD_OFFSET(PoolMakeSession, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolMakeSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolMakeUnicast::InitAsDefaultInstance() {
}
class PoolMakeUnicast::_Internal {
 public:
};

PoolMakeUnicast::PoolMakeUnicast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.PoolMakeUnicast)
}
PoolMakeUnicast::PoolMakeUnicast(const PoolMakeUnicast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.PoolMakeUnicast)
}

void PoolMakeUnicast::SharedCtor() {
  type_ = 0;
}

PoolMakeUnicast::~PoolMakeUnicast() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.PoolMakeUnicast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoolMakeUnicast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoolMakeUnicast::ArenaDtor(void* object) {
  PoolMakeUnicast* _this = reinterpret_cast< PoolMakeUnicast* >(object);
  (void)_this;
}
void PoolMakeUnicast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoolMakeUnicast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolMakeUnicast& PoolMakeUnicast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolMakeUnicast_Pool_2eproto.base);
  return *internal_default_instance();
}


void PoolMakeUnicast::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.PoolMakeUnicast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoolMakeUnicast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServerPushInterface.PoolMakeUnicast.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ServerPushInterface::PoolMakeUnicast_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolMakeUnicast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.PoolMakeUnicast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerPushInterface.PoolMakeUnicast.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.PoolMakeUnicast)
  return target;
}

size_t PoolMakeUnicast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.PoolMakeUnicast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerPushInterface.PoolMakeUnicast.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolMakeUnicast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.PoolMakeUnicast)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolMakeUnicast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolMakeUnicast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.PoolMakeUnicast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.PoolMakeUnicast)
    MergeFrom(*source);
  }
}

void PoolMakeUnicast::MergeFrom(const PoolMakeUnicast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.PoolMakeUnicast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PoolMakeUnicast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.PoolMakeUnicast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolMakeUnicast::CopyFrom(const PoolMakeUnicast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.PoolMakeUnicast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolMakeUnicast::IsInitialized() const {
  return true;
}

void PoolMakeUnicast::InternalSwap(PoolMakeUnicast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolMakeUnicast::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ServerPushInterface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerPushInterface::Pool_Response* Arena::CreateMaybeMessage< ::ServerPushInterface::Pool_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::Pool_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::Pool* Arena::CreateMaybeMessage< ::ServerPushInterface::Pool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::Pool >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::PoolFinishSession* Arena::CreateMaybeMessage< ::ServerPushInterface::PoolFinishSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::PoolFinishSession >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::PoolMakeSession_Response* Arena::CreateMaybeMessage< ::ServerPushInterface::PoolMakeSession_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::PoolMakeSession_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::PoolMakeSession* Arena::CreateMaybeMessage< ::ServerPushInterface::PoolMakeSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::PoolMakeSession >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::PoolMakeUnicast* Arena::CreateMaybeMessage< ::ServerPushInterface::PoolMakeUnicast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::PoolMakeUnicast >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
