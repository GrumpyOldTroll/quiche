// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Session.proto

#include "Session.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Session_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionAllowDatagrams_Session_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Session_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionChangeProperty_Session_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Session_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionDisallowDatagrams_Session_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Session_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionFinishStream_Session_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Session_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionMakeStream_Session_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Session_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionMakeStream_Response_Session_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Stream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Stream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Response_Stream_2eproto;
namespace ServerPushInterface {
class Session_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Session_Response> _instance;
  const ::ServerPushInterface::Stream_Response* stream_;
  const ::ServerPushInterface::SessionMakeStream_Response* make_session_;
} _Session_Response_default_instance_;
class SessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Session> _instance;
  const ::ServerPushInterface::Stream* stream_;
  const ::ServerPushInterface::SessionAllowDatagrams* allow_datagrams_;
  const ::ServerPushInterface::SessionDisallowDatagrams* disallow_datagrams_;
  const ::ServerPushInterface::SessionMakeStream* make_stream_;
  const ::ServerPushInterface::SessionFinishStream* finish_stream_;
  const ::ServerPushInterface::SessionChangeProperty* change_property_;
} _Session_default_instance_;
class SessionAllowDatagramsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionAllowDatagrams> _instance;
} _SessionAllowDatagrams_default_instance_;
class SessionDisallowDatagramsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionDisallowDatagrams> _instance;
} _SessionDisallowDatagrams_default_instance_;
class SessionFinishStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionFinishStream> _instance;
} _SessionFinishStream_default_instance_;
class SessionMakeStream_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionMakeStream_Response> _instance;
} _SessionMakeStream_Response_default_instance_;
class SessionMakeStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionMakeStream> _instance;
} _SessionMakeStream_default_instance_;
class SessionChangePropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionChangeProperty> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_idle_;
} _SessionChangeProperty_default_instance_;
}  // namespace ServerPushInterface
static void InitDefaultsscc_info_Session_Session_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_Session_default_instance_;
    new (ptr) ::ServerPushInterface::Session();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::Session::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Session_Session_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Session_Session_2eproto}, {
      &scc_info_Stream_Stream_2eproto.base,
      &scc_info_SessionAllowDatagrams_Session_2eproto.base,
      &scc_info_SessionDisallowDatagrams_Session_2eproto.base,
      &scc_info_SessionMakeStream_Session_2eproto.base,
      &scc_info_SessionFinishStream_Session_2eproto.base,
      &scc_info_SessionChangeProperty_Session_2eproto.base,}};

static void InitDefaultsscc_info_Session_Response_Session_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_Session_Response_default_instance_;
    new (ptr) ::ServerPushInterface::Session_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::Session_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Session_Response_Session_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Session_Response_Session_2eproto}, {
      &scc_info_Stream_Response_Stream_2eproto.base,
      &scc_info_SessionMakeStream_Response_Session_2eproto.base,}};

static void InitDefaultsscc_info_SessionAllowDatagrams_Session_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_SessionAllowDatagrams_default_instance_;
    new (ptr) ::ServerPushInterface::SessionAllowDatagrams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::SessionAllowDatagrams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionAllowDatagrams_Session_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionAllowDatagrams_Session_2eproto}, {}};

static void InitDefaultsscc_info_SessionChangeProperty_Session_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_SessionChangeProperty_default_instance_;
    new (ptr) ::ServerPushInterface::SessionChangeProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::SessionChangeProperty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionChangeProperty_Session_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionChangeProperty_Session_2eproto}, {}};

static void InitDefaultsscc_info_SessionDisallowDatagrams_Session_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_SessionDisallowDatagrams_default_instance_;
    new (ptr) ::ServerPushInterface::SessionDisallowDatagrams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::SessionDisallowDatagrams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionDisallowDatagrams_Session_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionDisallowDatagrams_Session_2eproto}, {}};

static void InitDefaultsscc_info_SessionFinishStream_Session_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_SessionFinishStream_default_instance_;
    new (ptr) ::ServerPushInterface::SessionFinishStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::SessionFinishStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionFinishStream_Session_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionFinishStream_Session_2eproto}, {}};

static void InitDefaultsscc_info_SessionMakeStream_Session_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_SessionMakeStream_default_instance_;
    new (ptr) ::ServerPushInterface::SessionMakeStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::SessionMakeStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionMakeStream_Session_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionMakeStream_Session_2eproto}, {}};

static void InitDefaultsscc_info_SessionMakeStream_Response_Session_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_SessionMakeStream_Response_default_instance_;
    new (ptr) ::ServerPushInterface::SessionMakeStream_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::SessionMakeStream_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionMakeStream_Response_Session_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionMakeStream_Response_Session_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Session_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Session_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Session_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Session_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Session_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Session_Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ServerPushInterface::Session_ResponseDefaultTypeInternal, stream_),
  offsetof(::ServerPushInterface::Session_ResponseDefaultTypeInternal, make_session_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Session_Response, CommandResponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Session, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Session, session_id_),
  offsetof(::ServerPushInterface::SessionDefaultTypeInternal, stream_),
  offsetof(::ServerPushInterface::SessionDefaultTypeInternal, allow_datagrams_),
  offsetof(::ServerPushInterface::SessionDefaultTypeInternal, disallow_datagrams_),
  offsetof(::ServerPushInterface::SessionDefaultTypeInternal, make_stream_),
  offsetof(::ServerPushInterface::SessionDefaultTypeInternal, finish_stream_),
  offsetof(::ServerPushInterface::SessionDefaultTypeInternal, change_property_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Session, Command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionAllowDatagrams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionAllowDatagrams, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionDisallowDatagrams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionFinishStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionFinishStream, stream_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionMakeStream_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionMakeStream_Response, stream_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionMakeStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionChangeProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionChangeProperty, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ServerPushInterface::SessionChangePropertyDefaultTypeInternal, max_rate_),
  offsetof(::ServerPushInterface::SessionChangePropertyDefaultTypeInternal, max_idle_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::SessionChangeProperty, Properties_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ServerPushInterface::Session_Response)},
  { 8, -1, sizeof(::ServerPushInterface::Session)},
  { 21, -1, sizeof(::ServerPushInterface::SessionAllowDatagrams)},
  { 27, -1, sizeof(::ServerPushInterface::SessionDisallowDatagrams)},
  { 32, -1, sizeof(::ServerPushInterface::SessionFinishStream)},
  { 38, -1, sizeof(::ServerPushInterface::SessionMakeStream_Response)},
  { 44, -1, sizeof(::ServerPushInterface::SessionMakeStream)},
  { 49, -1, sizeof(::ServerPushInterface::SessionChangeProperty)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_Session_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_Session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_SessionAllowDatagrams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_SessionDisallowDatagrams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_SessionFinishStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_SessionMakeStream_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_SessionMakeStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_SessionChangeProperty_default_instance_),
};

const char descriptor_table_protodef_Session_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rSession.proto\022\023ServerPushInterface\032\014St"
  "ream.proto\"\325\004\n\007Session\022\022\n\nsession_id\030\001 \001"
  "(\r\022-\n\006stream\030\002 \001(\0132\033.ServerPushInterface"
  ".StreamH\000\022E\n\017allow_datagrams\030\003 \001(\0132*.Ser"
  "verPushInterface.SessionAllowDatagramsH\000"
  "\022K\n\022disallow_datagrams\030\004 \001(\0132-.ServerPus"
  "hInterface.SessionDisallowDatagramsH\000\022=\n"
  "\013make_stream\030\005 \001(\0132&.ServerPushInterface"
  ".SessionMakeStreamH\000\022A\n\rfinish_stream\030\006 "
  "\001(\0132(.ServerPushInterface.SessionFinishS"
  "treamH\000\022E\n\017change_property\030\007 \001(\0132*.Serve"
  "rPushInterface.SessionChangePropertyH\000\032\236"
  "\001\n\010Response\0226\n\006stream\030\001 \001(\0132$.ServerPush"
  "Interface.Stream.ResponseH\000\022G\n\014make_sess"
  "ion\030\002 \001(\0132/.ServerPushInterface.SessionM"
  "akeStream.ResponseH\000B\021\n\017CommandResponseB"
  "\t\n\007Command\"%\n\025SessionAllowDatagrams\022\014\n\004s"
  "ize\030\001 \001(\r\"\032\n\030SessionDisallowDatagrams\"(\n"
  "\023SessionFinishStream\022\021\n\tstream_id\030\001 \001(\r\""
  "2\n\021SessionMakeStream\032\035\n\010Response\022\021\n\tstre"
  "am_id\030\001 \001(\r\"M\n\025SessionChangeProperty\022\022\n\010"
  "max_rate\030\001 \001(\rH\000\022\022\n\010max_idle\030\002 \001(\rH\000B\014\n\n"
  "Propertiesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Session_2eproto_deps[1] = {
  &::descriptor_table_Stream_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Session_2eproto_sccs[8] = {
  &scc_info_Session_Session_2eproto.base,
  &scc_info_Session_Response_Session_2eproto.base,
  &scc_info_SessionAllowDatagrams_Session_2eproto.base,
  &scc_info_SessionChangeProperty_Session_2eproto.base,
  &scc_info_SessionDisallowDatagrams_Session_2eproto.base,
  &scc_info_SessionFinishStream_Session_2eproto.base,
  &scc_info_SessionMakeStream_Session_2eproto.base,
  &scc_info_SessionMakeStream_Response_Session_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Session_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Session_2eproto = {
  false, false, descriptor_table_protodef_Session_2eproto, "Session.proto", 898,
  &descriptor_table_Session_2eproto_once, descriptor_table_Session_2eproto_sccs, descriptor_table_Session_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_Session_2eproto::offsets,
  file_level_metadata_Session_2eproto, 8, file_level_enum_descriptors_Session_2eproto, file_level_service_descriptors_Session_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Session_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Session_2eproto)), true);
namespace ServerPushInterface {

// ===================================================================

void Session_Response::InitAsDefaultInstance() {
  ::ServerPushInterface::_Session_Response_default_instance_.stream_ = const_cast< ::ServerPushInterface::Stream_Response*>(
      ::ServerPushInterface::Stream_Response::internal_default_instance());
  ::ServerPushInterface::_Session_Response_default_instance_.make_session_ = const_cast< ::ServerPushInterface::SessionMakeStream_Response*>(
      ::ServerPushInterface::SessionMakeStream_Response::internal_default_instance());
}
class Session_Response::_Internal {
 public:
  static const ::ServerPushInterface::Stream_Response& stream(const Session_Response* msg);
  static const ::ServerPushInterface::SessionMakeStream_Response& make_session(const Session_Response* msg);
};

const ::ServerPushInterface::Stream_Response&
Session_Response::_Internal::stream(const Session_Response* msg) {
  return *msg->CommandResponse_.stream_;
}
const ::ServerPushInterface::SessionMakeStream_Response&
Session_Response::_Internal::make_session(const Session_Response* msg) {
  return *msg->CommandResponse_.make_session_;
}
void Session_Response::set_allocated_stream(::ServerPushInterface::Stream_Response* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_CommandResponse();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream)->GetArena();
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    CommandResponse_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Session.Response.stream)
}
void Session_Response::clear_stream() {
  if (_internal_has_stream()) {
    if (GetArena() == nullptr) {
      delete CommandResponse_.stream_;
    }
    clear_has_CommandResponse();
  }
}
void Session_Response::set_allocated_make_session(::ServerPushInterface::SessionMakeStream_Response* make_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_CommandResponse();
  if (make_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(make_session);
    if (message_arena != submessage_arena) {
      make_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_session, submessage_arena);
    }
    set_has_make_session();
    CommandResponse_.make_session_ = make_session;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Session.Response.make_session)
}
Session_Response::Session_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.Session.Response)
}
Session_Response::Session_Response(const Session_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_CommandResponse();
  switch (from.CommandResponse_case()) {
    case kStream: {
      _internal_mutable_stream()->::ServerPushInterface::Stream_Response::MergeFrom(from._internal_stream());
      break;
    }
    case kMakeSession: {
      _internal_mutable_make_session()->::ServerPushInterface::SessionMakeStream_Response::MergeFrom(from._internal_make_session());
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.Session.Response)
}

void Session_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Session_Response_Session_2eproto.base);
  clear_has_CommandResponse();
}

Session_Response::~Session_Response() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.Session.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Session_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_CommandResponse()) {
    clear_CommandResponse();
  }
}

void Session_Response::ArenaDtor(void* object) {
  Session_Response* _this = reinterpret_cast< Session_Response* >(object);
  (void)_this;
}
void Session_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Session_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Session_Response& Session_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Session_Response_Session_2eproto.base);
  return *internal_default_instance();
}


void Session_Response::clear_CommandResponse() {
// @@protoc_insertion_point(one_of_clear_start:ServerPushInterface.Session.Response)
  switch (CommandResponse_case()) {
    case kStream: {
      if (GetArena() == nullptr) {
        delete CommandResponse_.stream_;
      }
      break;
    }
    case kMakeSession: {
      if (GetArena() == nullptr) {
        delete CommandResponse_.make_session_;
      }
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMANDRESPONSE_NOT_SET;
}


void Session_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.Session.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_CommandResponse();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServerPushInterface.Stream.Response stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.SessionMakeStream.Response make_session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Session_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.Session.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerPushInterface.Stream.Response stream = 1;
  if (_internal_has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream(this), target, stream);
  }

  // .ServerPushInterface.SessionMakeStream.Response make_session = 2;
  if (_internal_has_make_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::make_session(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.Session.Response)
  return target;
}

size_t Session_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.Session.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (CommandResponse_case()) {
    // .ServerPushInterface.Stream.Response stream = 1;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CommandResponse_.stream_);
      break;
    }
    // .ServerPushInterface.SessionMakeStream.Response make_session = 2;
    case kMakeSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CommandResponse_.make_session_);
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Session_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.Session.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Session_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Session_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.Session.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.Session.Response)
    MergeFrom(*source);
  }
}

void Session_Response::MergeFrom(const Session_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.Session.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.CommandResponse_case()) {
    case kStream: {
      _internal_mutable_stream()->::ServerPushInterface::Stream_Response::MergeFrom(from._internal_stream());
      break;
    }
    case kMakeSession: {
      _internal_mutable_make_session()->::ServerPushInterface::SessionMakeStream_Response::MergeFrom(from._internal_make_session());
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
}

void Session_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.Session.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session_Response::CopyFrom(const Session_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.Session.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session_Response::IsInitialized() const {
  return true;
}

void Session_Response::InternalSwap(Session_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(CommandResponse_, other->CommandResponse_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Session_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Session::InitAsDefaultInstance() {
  ::ServerPushInterface::_Session_default_instance_.stream_ = const_cast< ::ServerPushInterface::Stream*>(
      ::ServerPushInterface::Stream::internal_default_instance());
  ::ServerPushInterface::_Session_default_instance_.allow_datagrams_ = const_cast< ::ServerPushInterface::SessionAllowDatagrams*>(
      ::ServerPushInterface::SessionAllowDatagrams::internal_default_instance());
  ::ServerPushInterface::_Session_default_instance_.disallow_datagrams_ = const_cast< ::ServerPushInterface::SessionDisallowDatagrams*>(
      ::ServerPushInterface::SessionDisallowDatagrams::internal_default_instance());
  ::ServerPushInterface::_Session_default_instance_.make_stream_ = const_cast< ::ServerPushInterface::SessionMakeStream*>(
      ::ServerPushInterface::SessionMakeStream::internal_default_instance());
  ::ServerPushInterface::_Session_default_instance_.finish_stream_ = const_cast< ::ServerPushInterface::SessionFinishStream*>(
      ::ServerPushInterface::SessionFinishStream::internal_default_instance());
  ::ServerPushInterface::_Session_default_instance_.change_property_ = const_cast< ::ServerPushInterface::SessionChangeProperty*>(
      ::ServerPushInterface::SessionChangeProperty::internal_default_instance());
}
class Session::_Internal {
 public:
  static const ::ServerPushInterface::Stream& stream(const Session* msg);
  static const ::ServerPushInterface::SessionAllowDatagrams& allow_datagrams(const Session* msg);
  static const ::ServerPushInterface::SessionDisallowDatagrams& disallow_datagrams(const Session* msg);
  static const ::ServerPushInterface::SessionMakeStream& make_stream(const Session* msg);
  static const ::ServerPushInterface::SessionFinishStream& finish_stream(const Session* msg);
  static const ::ServerPushInterface::SessionChangeProperty& change_property(const Session* msg);
};

const ::ServerPushInterface::Stream&
Session::_Internal::stream(const Session* msg) {
  return *msg->Command_.stream_;
}
const ::ServerPushInterface::SessionAllowDatagrams&
Session::_Internal::allow_datagrams(const Session* msg) {
  return *msg->Command_.allow_datagrams_;
}
const ::ServerPushInterface::SessionDisallowDatagrams&
Session::_Internal::disallow_datagrams(const Session* msg) {
  return *msg->Command_.disallow_datagrams_;
}
const ::ServerPushInterface::SessionMakeStream&
Session::_Internal::make_stream(const Session* msg) {
  return *msg->Command_.make_stream_;
}
const ::ServerPushInterface::SessionFinishStream&
Session::_Internal::finish_stream(const Session* msg) {
  return *msg->Command_.finish_stream_;
}
const ::ServerPushInterface::SessionChangeProperty&
Session::_Internal::change_property(const Session* msg) {
  return *msg->Command_.change_property_;
}
void Session::set_allocated_stream(::ServerPushInterface::Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream)->GetArena();
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    Command_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Session.stream)
}
void Session::clear_stream() {
  if (_internal_has_stream()) {
    if (GetArena() == nullptr) {
      delete Command_.stream_;
    }
    clear_has_Command();
  }
}
void Session::set_allocated_allow_datagrams(::ServerPushInterface::SessionAllowDatagrams* allow_datagrams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (allow_datagrams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(allow_datagrams);
    if (message_arena != submessage_arena) {
      allow_datagrams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_datagrams, submessage_arena);
    }
    set_has_allow_datagrams();
    Command_.allow_datagrams_ = allow_datagrams;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Session.allow_datagrams)
}
void Session::set_allocated_disallow_datagrams(::ServerPushInterface::SessionDisallowDatagrams* disallow_datagrams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (disallow_datagrams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(disallow_datagrams);
    if (message_arena != submessage_arena) {
      disallow_datagrams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disallow_datagrams, submessage_arena);
    }
    set_has_disallow_datagrams();
    Command_.disallow_datagrams_ = disallow_datagrams;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Session.disallow_datagrams)
}
void Session::set_allocated_make_stream(::ServerPushInterface::SessionMakeStream* make_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (make_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(make_stream);
    if (message_arena != submessage_arena) {
      make_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_stream, submessage_arena);
    }
    set_has_make_stream();
    Command_.make_stream_ = make_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Session.make_stream)
}
void Session::set_allocated_finish_stream(::ServerPushInterface::SessionFinishStream* finish_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (finish_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(finish_stream);
    if (message_arena != submessage_arena) {
      finish_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_stream, submessage_arena);
    }
    set_has_finish_stream();
    Command_.finish_stream_ = finish_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Session.finish_stream)
}
void Session::set_allocated_change_property(::ServerPushInterface::SessionChangeProperty* change_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (change_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(change_property);
    if (message_arena != submessage_arena) {
      change_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_property, submessage_arena);
    }
    set_has_change_property();
    Command_.change_property_ = change_property;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Session.change_property)
}
Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  clear_has_Command();
  switch (from.Command_case()) {
    case kStream: {
      _internal_mutable_stream()->::ServerPushInterface::Stream::MergeFrom(from._internal_stream());
      break;
    }
    case kAllowDatagrams: {
      _internal_mutable_allow_datagrams()->::ServerPushInterface::SessionAllowDatagrams::MergeFrom(from._internal_allow_datagrams());
      break;
    }
    case kDisallowDatagrams: {
      _internal_mutable_disallow_datagrams()->::ServerPushInterface::SessionDisallowDatagrams::MergeFrom(from._internal_disallow_datagrams());
      break;
    }
    case kMakeStream: {
      _internal_mutable_make_stream()->::ServerPushInterface::SessionMakeStream::MergeFrom(from._internal_make_stream());
      break;
    }
    case kFinishStream: {
      _internal_mutable_finish_stream()->::ServerPushInterface::SessionFinishStream::MergeFrom(from._internal_finish_stream());
      break;
    }
    case kChangeProperty: {
      _internal_mutable_change_property()->::ServerPushInterface::SessionChangeProperty::MergeFrom(from._internal_change_property());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.Session)
}

void Session::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Session_Session_2eproto.base);
  session_id_ = 0u;
  clear_has_Command();
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.Session)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Command()) {
    clear_Command();
  }
}

void Session::ArenaDtor(void* object) {
  Session* _this = reinterpret_cast< Session* >(object);
  (void)_this;
}
void Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Session& Session::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Session_Session_2eproto.base);
  return *internal_default_instance();
}


void Session::clear_Command() {
// @@protoc_insertion_point(one_of_clear_start:ServerPushInterface.Session)
  switch (Command_case()) {
    case kStream: {
      if (GetArena() == nullptr) {
        delete Command_.stream_;
      }
      break;
    }
    case kAllowDatagrams: {
      if (GetArena() == nullptr) {
        delete Command_.allow_datagrams_;
      }
      break;
    }
    case kDisallowDatagrams: {
      if (GetArena() == nullptr) {
        delete Command_.disallow_datagrams_;
      }
      break;
    }
    case kMakeStream: {
      if (GetArena() == nullptr) {
        delete Command_.make_stream_;
      }
      break;
    }
    case kFinishStream: {
      if (GetArena() == nullptr) {
        delete Command_.finish_stream_;
      }
      break;
    }
    case kChangeProperty: {
      if (GetArena() == nullptr) {
        delete Command_.change_property_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = 0u;
  clear_Command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.Stream stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.SessionAllowDatagrams allow_datagrams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_allow_datagrams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.SessionDisallowDatagrams disallow_datagrams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_disallow_datagrams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.SessionMakeStream make_stream = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.SessionFinishStream finish_stream = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_finish_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.SessionChangeProperty change_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Session::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_session_id(), target);
  }

  // .ServerPushInterface.Stream stream = 2;
  if (_internal_has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream(this), target, stream);
  }

  // .ServerPushInterface.SessionAllowDatagrams allow_datagrams = 3;
  if (_internal_has_allow_datagrams()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::allow_datagrams(this), target, stream);
  }

  // .ServerPushInterface.SessionDisallowDatagrams disallow_datagrams = 4;
  if (_internal_has_disallow_datagrams()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::disallow_datagrams(this), target, stream);
  }

  // .ServerPushInterface.SessionMakeStream make_stream = 5;
  if (_internal_has_make_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::make_stream(this), target, stream);
  }

  // .ServerPushInterface.SessionFinishStream finish_stream = 6;
  if (_internal_has_finish_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::finish_stream(this), target, stream);
  }

  // .ServerPushInterface.SessionChangeProperty change_property = 7;
  if (_internal_has_change_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::change_property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.Session)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_session_id());
  }

  switch (Command_case()) {
    // .ServerPushInterface.Stream stream = 2;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.stream_);
      break;
    }
    // .ServerPushInterface.SessionAllowDatagrams allow_datagrams = 3;
    case kAllowDatagrams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.allow_datagrams_);
      break;
    }
    // .ServerPushInterface.SessionDisallowDatagrams disallow_datagrams = 4;
    case kDisallowDatagrams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.disallow_datagrams_);
      break;
    }
    // .ServerPushInterface.SessionMakeStream make_stream = 5;
    case kMakeStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.make_stream_);
      break;
    }
    // .ServerPushInterface.SessionFinishStream finish_stream = 6;
    case kFinishStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.finish_stream_);
      break;
    }
    // .ServerPushInterface.SessionChangeProperty change_property = 7;
    case kChangeProperty: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.change_property_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Session::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Session>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.Session)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  switch (from.Command_case()) {
    case kStream: {
      _internal_mutable_stream()->::ServerPushInterface::Stream::MergeFrom(from._internal_stream());
      break;
    }
    case kAllowDatagrams: {
      _internal_mutable_allow_datagrams()->::ServerPushInterface::SessionAllowDatagrams::MergeFrom(from._internal_allow_datagrams());
      break;
    }
    case kDisallowDatagrams: {
      _internal_mutable_disallow_datagrams()->::ServerPushInterface::SessionDisallowDatagrams::MergeFrom(from._internal_disallow_datagrams());
      break;
    }
    case kMakeStream: {
      _internal_mutable_make_stream()->::ServerPushInterface::SessionMakeStream::MergeFrom(from._internal_make_stream());
      break;
    }
    case kFinishStream: {
      _internal_mutable_finish_stream()->::ServerPushInterface::SessionFinishStream::MergeFrom(from._internal_finish_stream());
      break;
    }
    case kChangeProperty: {
      _internal_mutable_change_property()->::ServerPushInterface::SessionChangeProperty::MergeFrom(from._internal_change_property());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void Session::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
  swap(Command_, other->Command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionAllowDatagrams::InitAsDefaultInstance() {
}
class SessionAllowDatagrams::_Internal {
 public:
};

SessionAllowDatagrams::SessionAllowDatagrams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.SessionAllowDatagrams)
}
SessionAllowDatagrams::SessionAllowDatagrams(const SessionAllowDatagrams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.SessionAllowDatagrams)
}

void SessionAllowDatagrams::SharedCtor() {
  size_ = 0u;
}

SessionAllowDatagrams::~SessionAllowDatagrams() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.SessionAllowDatagrams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionAllowDatagrams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionAllowDatagrams::ArenaDtor(void* object) {
  SessionAllowDatagrams* _this = reinterpret_cast< SessionAllowDatagrams* >(object);
  (void)_this;
}
void SessionAllowDatagrams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionAllowDatagrams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionAllowDatagrams& SessionAllowDatagrams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionAllowDatagrams_Session_2eproto.base);
  return *internal_default_instance();
}


void SessionAllowDatagrams::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.SessionAllowDatagrams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionAllowDatagrams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionAllowDatagrams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.SessionAllowDatagrams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.SessionAllowDatagrams)
  return target;
}

size_t SessionAllowDatagrams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.SessionAllowDatagrams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionAllowDatagrams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.SessionAllowDatagrams)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionAllowDatagrams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionAllowDatagrams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.SessionAllowDatagrams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.SessionAllowDatagrams)
    MergeFrom(*source);
  }
}

void SessionAllowDatagrams::MergeFrom(const SessionAllowDatagrams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.SessionAllowDatagrams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void SessionAllowDatagrams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.SessionAllowDatagrams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionAllowDatagrams::CopyFrom(const SessionAllowDatagrams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.SessionAllowDatagrams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionAllowDatagrams::IsInitialized() const {
  return true;
}

void SessionAllowDatagrams::InternalSwap(SessionAllowDatagrams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionAllowDatagrams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionDisallowDatagrams::InitAsDefaultInstance() {
}
class SessionDisallowDatagrams::_Internal {
 public:
};

SessionDisallowDatagrams::SessionDisallowDatagrams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.SessionDisallowDatagrams)
}
SessionDisallowDatagrams::SessionDisallowDatagrams(const SessionDisallowDatagrams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.SessionDisallowDatagrams)
}

void SessionDisallowDatagrams::SharedCtor() {
}

SessionDisallowDatagrams::~SessionDisallowDatagrams() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.SessionDisallowDatagrams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionDisallowDatagrams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionDisallowDatagrams::ArenaDtor(void* object) {
  SessionDisallowDatagrams* _this = reinterpret_cast< SessionDisallowDatagrams* >(object);
  (void)_this;
}
void SessionDisallowDatagrams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionDisallowDatagrams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionDisallowDatagrams& SessionDisallowDatagrams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionDisallowDatagrams_Session_2eproto.base);
  return *internal_default_instance();
}


void SessionDisallowDatagrams::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.SessionDisallowDatagrams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionDisallowDatagrams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionDisallowDatagrams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.SessionDisallowDatagrams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.SessionDisallowDatagrams)
  return target;
}

size_t SessionDisallowDatagrams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.SessionDisallowDatagrams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionDisallowDatagrams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.SessionDisallowDatagrams)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionDisallowDatagrams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionDisallowDatagrams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.SessionDisallowDatagrams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.SessionDisallowDatagrams)
    MergeFrom(*source);
  }
}

void SessionDisallowDatagrams::MergeFrom(const SessionDisallowDatagrams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.SessionDisallowDatagrams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SessionDisallowDatagrams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.SessionDisallowDatagrams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionDisallowDatagrams::CopyFrom(const SessionDisallowDatagrams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.SessionDisallowDatagrams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionDisallowDatagrams::IsInitialized() const {
  return true;
}

void SessionDisallowDatagrams::InternalSwap(SessionDisallowDatagrams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionDisallowDatagrams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionFinishStream::InitAsDefaultInstance() {
}
class SessionFinishStream::_Internal {
 public:
};

SessionFinishStream::SessionFinishStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.SessionFinishStream)
}
SessionFinishStream::SessionFinishStream(const SessionFinishStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stream_id_ = from.stream_id_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.SessionFinishStream)
}

void SessionFinishStream::SharedCtor() {
  stream_id_ = 0u;
}

SessionFinishStream::~SessionFinishStream() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.SessionFinishStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionFinishStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionFinishStream::ArenaDtor(void* object) {
  SessionFinishStream* _this = reinterpret_cast< SessionFinishStream* >(object);
  (void)_this;
}
void SessionFinishStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionFinishStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionFinishStream& SessionFinishStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionFinishStream_Session_2eproto.base);
  return *internal_default_instance();
}


void SessionFinishStream::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.SessionFinishStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionFinishStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionFinishStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.SessionFinishStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stream_id = 1;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.SessionFinishStream)
  return target;
}

size_t SessionFinishStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.SessionFinishStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 stream_id = 1;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionFinishStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.SessionFinishStream)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionFinishStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionFinishStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.SessionFinishStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.SessionFinishStream)
    MergeFrom(*source);
  }
}

void SessionFinishStream::MergeFrom(const SessionFinishStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.SessionFinishStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
}

void SessionFinishStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.SessionFinishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionFinishStream::CopyFrom(const SessionFinishStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.SessionFinishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionFinishStream::IsInitialized() const {
  return true;
}

void SessionFinishStream::InternalSwap(SessionFinishStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionFinishStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionMakeStream_Response::InitAsDefaultInstance() {
}
class SessionMakeStream_Response::_Internal {
 public:
};

SessionMakeStream_Response::SessionMakeStream_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.SessionMakeStream.Response)
}
SessionMakeStream_Response::SessionMakeStream_Response(const SessionMakeStream_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stream_id_ = from.stream_id_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.SessionMakeStream.Response)
}

void SessionMakeStream_Response::SharedCtor() {
  stream_id_ = 0u;
}

SessionMakeStream_Response::~SessionMakeStream_Response() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.SessionMakeStream.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionMakeStream_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionMakeStream_Response::ArenaDtor(void* object) {
  SessionMakeStream_Response* _this = reinterpret_cast< SessionMakeStream_Response* >(object);
  (void)_this;
}
void SessionMakeStream_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionMakeStream_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionMakeStream_Response& SessionMakeStream_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionMakeStream_Response_Session_2eproto.base);
  return *internal_default_instance();
}


void SessionMakeStream_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.SessionMakeStream.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionMakeStream_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionMakeStream_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.SessionMakeStream.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stream_id = 1;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.SessionMakeStream.Response)
  return target;
}

size_t SessionMakeStream_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.SessionMakeStream.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 stream_id = 1;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionMakeStream_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.SessionMakeStream.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionMakeStream_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionMakeStream_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.SessionMakeStream.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.SessionMakeStream.Response)
    MergeFrom(*source);
  }
}

void SessionMakeStream_Response::MergeFrom(const SessionMakeStream_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.SessionMakeStream.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
}

void SessionMakeStream_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.SessionMakeStream.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionMakeStream_Response::CopyFrom(const SessionMakeStream_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.SessionMakeStream.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionMakeStream_Response::IsInitialized() const {
  return true;
}

void SessionMakeStream_Response::InternalSwap(SessionMakeStream_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionMakeStream_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionMakeStream::InitAsDefaultInstance() {
}
class SessionMakeStream::_Internal {
 public:
};

SessionMakeStream::SessionMakeStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.SessionMakeStream)
}
SessionMakeStream::SessionMakeStream(const SessionMakeStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.SessionMakeStream)
}

void SessionMakeStream::SharedCtor() {
}

SessionMakeStream::~SessionMakeStream() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.SessionMakeStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionMakeStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SessionMakeStream::ArenaDtor(void* object) {
  SessionMakeStream* _this = reinterpret_cast< SessionMakeStream* >(object);
  (void)_this;
}
void SessionMakeStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionMakeStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionMakeStream& SessionMakeStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionMakeStream_Session_2eproto.base);
  return *internal_default_instance();
}


void SessionMakeStream::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.SessionMakeStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionMakeStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionMakeStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.SessionMakeStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.SessionMakeStream)
  return target;
}

size_t SessionMakeStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.SessionMakeStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionMakeStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.SessionMakeStream)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionMakeStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionMakeStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.SessionMakeStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.SessionMakeStream)
    MergeFrom(*source);
  }
}

void SessionMakeStream::MergeFrom(const SessionMakeStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.SessionMakeStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SessionMakeStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.SessionMakeStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionMakeStream::CopyFrom(const SessionMakeStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.SessionMakeStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionMakeStream::IsInitialized() const {
  return true;
}

void SessionMakeStream::InternalSwap(SessionMakeStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionMakeStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionChangeProperty::InitAsDefaultInstance() {
  ::ServerPushInterface::_SessionChangeProperty_default_instance_.max_rate_ = 0u;
  ::ServerPushInterface::_SessionChangeProperty_default_instance_.max_idle_ = 0u;
}
class SessionChangeProperty::_Internal {
 public:
};

SessionChangeProperty::SessionChangeProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.SessionChangeProperty)
}
SessionChangeProperty::SessionChangeProperty(const SessionChangeProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Properties();
  switch (from.Properties_case()) {
    case kMaxRate: {
      _internal_set_max_rate(from._internal_max_rate());
      break;
    }
    case kMaxIdle: {
      _internal_set_max_idle(from._internal_max_idle());
      break;
    }
    case PROPERTIES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.SessionChangeProperty)
}

void SessionChangeProperty::SharedCtor() {
  clear_has_Properties();
}

SessionChangeProperty::~SessionChangeProperty() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.SessionChangeProperty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionChangeProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Properties()) {
    clear_Properties();
  }
}

void SessionChangeProperty::ArenaDtor(void* object) {
  SessionChangeProperty* _this = reinterpret_cast< SessionChangeProperty* >(object);
  (void)_this;
}
void SessionChangeProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionChangeProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionChangeProperty& SessionChangeProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionChangeProperty_Session_2eproto.base);
  return *internal_default_instance();
}


void SessionChangeProperty::clear_Properties() {
// @@protoc_insertion_point(one_of_clear_start:ServerPushInterface.SessionChangeProperty)
  switch (Properties_case()) {
    case kMaxRate: {
      // No need to clear
      break;
    }
    case kMaxIdle: {
      // No need to clear
      break;
    }
    case PROPERTIES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTIES_NOT_SET;
}


void SessionChangeProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.SessionChangeProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Properties();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionChangeProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_max_rate(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_idle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_max_idle(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionChangeProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.SessionChangeProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_rate = 1;
  if (_internal_has_max_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_rate(), target);
  }

  // uint32 max_idle = 2;
  if (_internal_has_max_idle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_idle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.SessionChangeProperty)
  return target;
}

size_t SessionChangeProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.SessionChangeProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Properties_case()) {
    // uint32 max_rate = 1;
    case kMaxRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_rate());
      break;
    }
    // uint32 max_idle = 2;
    case kMaxIdle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_idle());
      break;
    }
    case PROPERTIES_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionChangeProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.SessionChangeProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionChangeProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionChangeProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.SessionChangeProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.SessionChangeProperty)
    MergeFrom(*source);
  }
}

void SessionChangeProperty::MergeFrom(const SessionChangeProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.SessionChangeProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Properties_case()) {
    case kMaxRate: {
      _internal_set_max_rate(from._internal_max_rate());
      break;
    }
    case kMaxIdle: {
      _internal_set_max_idle(from._internal_max_idle());
      break;
    }
    case PROPERTIES_NOT_SET: {
      break;
    }
  }
}

void SessionChangeProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.SessionChangeProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionChangeProperty::CopyFrom(const SessionChangeProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.SessionChangeProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionChangeProperty::IsInitialized() const {
  return true;
}

void SessionChangeProperty::InternalSwap(SessionChangeProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Properties_, other->Properties_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionChangeProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ServerPushInterface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerPushInterface::Session_Response* Arena::CreateMaybeMessage< ::ServerPushInterface::Session_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::Session_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::Session* Arena::CreateMaybeMessage< ::ServerPushInterface::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::Session >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::SessionAllowDatagrams* Arena::CreateMaybeMessage< ::ServerPushInterface::SessionAllowDatagrams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::SessionAllowDatagrams >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::SessionDisallowDatagrams* Arena::CreateMaybeMessage< ::ServerPushInterface::SessionDisallowDatagrams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::SessionDisallowDatagrams >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::SessionFinishStream* Arena::CreateMaybeMessage< ::ServerPushInterface::SessionFinishStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::SessionFinishStream >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::SessionMakeStream_Response* Arena::CreateMaybeMessage< ::ServerPushInterface::SessionMakeStream_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::SessionMakeStream_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::SessionMakeStream* Arena::CreateMaybeMessage< ::ServerPushInterface::SessionMakeStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::SessionMakeStream >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::SessionChangeProperty* Arena::CreateMaybeMessage< ::ServerPushInterface::SessionChangeProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::SessionChangeProperty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
