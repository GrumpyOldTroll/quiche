// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Top.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Top_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Top_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Pool.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Top_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Top_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Top_2eproto;
namespace ServerPushInterface {
class Top;
class TopDefaultTypeInternal;
extern TopDefaultTypeInternal _Top_default_instance_;
class TopActivatePool;
class TopActivatePoolDefaultTypeInternal;
extern TopActivatePoolDefaultTypeInternal _TopActivatePool_default_instance_;
class TopDeactivatePool;
class TopDeactivatePoolDefaultTypeInternal;
extern TopDeactivatePoolDefaultTypeInternal _TopDeactivatePool_default_instance_;
class TopMakePool;
class TopMakePoolDefaultTypeInternal;
extern TopMakePoolDefaultTypeInternal _TopMakePool_default_instance_;
class TopMakePool_Response;
class TopMakePool_ResponseDefaultTypeInternal;
extern TopMakePool_ResponseDefaultTypeInternal _TopMakePool_Response_default_instance_;
class Top_Response;
class Top_ResponseDefaultTypeInternal;
extern Top_ResponseDefaultTypeInternal _Top_Response_default_instance_;
}  // namespace ServerPushInterface
PROTOBUF_NAMESPACE_OPEN
template<> ::ServerPushInterface::Top* Arena::CreateMaybeMessage<::ServerPushInterface::Top>(Arena*);
template<> ::ServerPushInterface::TopActivatePool* Arena::CreateMaybeMessage<::ServerPushInterface::TopActivatePool>(Arena*);
template<> ::ServerPushInterface::TopDeactivatePool* Arena::CreateMaybeMessage<::ServerPushInterface::TopDeactivatePool>(Arena*);
template<> ::ServerPushInterface::TopMakePool* Arena::CreateMaybeMessage<::ServerPushInterface::TopMakePool>(Arena*);
template<> ::ServerPushInterface::TopMakePool_Response* Arena::CreateMaybeMessage<::ServerPushInterface::TopMakePool_Response>(Arena*);
template<> ::ServerPushInterface::Top_Response* Arena::CreateMaybeMessage<::ServerPushInterface::Top_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ServerPushInterface {

enum TopMakePool_Type : int {
  TopMakePool_Type_Reserved = 0,
  TopMakePool_Type_Alternatives = 1,
  TopMakePool_Type_OrderedLayers = 2,
  TopMakePool_Type_ArbitraryLayers = 3,
  TopMakePool_Type_TopMakePool_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TopMakePool_Type_TopMakePool_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TopMakePool_Type_IsValid(int value);
constexpr TopMakePool_Type TopMakePool_Type_Type_MIN = TopMakePool_Type_Reserved;
constexpr TopMakePool_Type TopMakePool_Type_Type_MAX = TopMakePool_Type_ArbitraryLayers;
constexpr int TopMakePool_Type_Type_ARRAYSIZE = TopMakePool_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TopMakePool_Type_descriptor();
template<typename T>
inline const std::string& TopMakePool_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TopMakePool_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TopMakePool_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TopMakePool_Type_descriptor(), enum_t_value);
}
inline bool TopMakePool_Type_Parse(
    const std::string& name, TopMakePool_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TopMakePool_Type>(
    TopMakePool_Type_descriptor(), name, value);
}
// ===================================================================

class Top_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.Top.Response) */ {
 public:
  inline Top_Response() : Top_Response(nullptr) {};
  virtual ~Top_Response();

  Top_Response(const Top_Response& from);
  Top_Response(Top_Response&& from) noexcept
    : Top_Response() {
    *this = ::std::move(from);
  }

  inline Top_Response& operator=(const Top_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Top_Response& operator=(Top_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Top_Response& default_instance();

  enum CommandResponseCase {
    kPool = 3,
    kMakePool = 4,
    COMMANDRESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Top_Response* internal_default_instance() {
    return reinterpret_cast<const Top_Response*>(
               &_Top_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Top_Response& a, Top_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Top_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Top_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Top_Response* New() const final {
    return CreateMaybeMessage<Top_Response>(nullptr);
  }

  Top_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Top_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Top_Response& from);
  void MergeFrom(const Top_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Top_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.Top.Response";
  }
  protected:
  explicit Top_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Top_2eproto);
    return ::descriptor_table_Top_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kPoolFieldNumber = 3,
    kMakePoolFieldNumber = 4,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_message(
      std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .ServerPushInterface.Pool.Response pool = 3;
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  const ::ServerPushInterface::Pool_Response& pool() const;
  ::ServerPushInterface::Pool_Response* release_pool();
  ::ServerPushInterface::Pool_Response* mutable_pool();
  void set_allocated_pool(::ServerPushInterface::Pool_Response* pool);
  private:
  const ::ServerPushInterface::Pool_Response& _internal_pool() const;
  ::ServerPushInterface::Pool_Response* _internal_mutable_pool();
  public:
  void unsafe_arena_set_allocated_pool(
      ::ServerPushInterface::Pool_Response* pool);
  ::ServerPushInterface::Pool_Response* unsafe_arena_release_pool();

  // .ServerPushInterface.TopMakePool.Response make_pool = 4;
  bool has_make_pool() const;
  private:
  bool _internal_has_make_pool() const;
  public:
  void clear_make_pool();
  const ::ServerPushInterface::TopMakePool_Response& make_pool() const;
  ::ServerPushInterface::TopMakePool_Response* release_make_pool();
  ::ServerPushInterface::TopMakePool_Response* mutable_make_pool();
  void set_allocated_make_pool(::ServerPushInterface::TopMakePool_Response* make_pool);
  private:
  const ::ServerPushInterface::TopMakePool_Response& _internal_make_pool() const;
  ::ServerPushInterface::TopMakePool_Response* _internal_mutable_make_pool();
  public:
  void unsafe_arena_set_allocated_make_pool(
      ::ServerPushInterface::TopMakePool_Response* make_pool);
  ::ServerPushInterface::TopMakePool_Response* unsafe_arena_release_make_pool();

  void clear_CommandResponse();
  CommandResponseCase CommandResponse_case() const;
  // @@protoc_insertion_point(class_scope:ServerPushInterface.Top.Response)
 private:
  class _Internal;
  void set_has_pool();
  void set_has_make_pool();

  inline bool has_CommandResponse() const;
  inline void clear_has_CommandResponse();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  bool success_;
  union CommandResponseUnion {
    CommandResponseUnion() {}
    ::ServerPushInterface::Pool_Response* pool_;
    ::ServerPushInterface::TopMakePool_Response* make_pool_;
  } CommandResponse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Top_2eproto;
};
// -------------------------------------------------------------------

class Top PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.Top) */ {
 public:
  inline Top() : Top(nullptr) {};
  virtual ~Top();

  Top(const Top& from);
  Top(Top&& from) noexcept
    : Top() {
    *this = ::std::move(from);
  }

  inline Top& operator=(const Top& from) {
    CopyFrom(from);
    return *this;
  }
  inline Top& operator=(Top&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Top& default_instance();

  enum CommandCase {
    kPool = 1,
    kMakePool = 2,
    kActivatePool = 3,
    kDeactivatePool = 4,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Top* internal_default_instance() {
    return reinterpret_cast<const Top*>(
               &_Top_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Top& a, Top& b) {
    a.Swap(&b);
  }
  inline void Swap(Top* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Top* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Top* New() const final {
    return CreateMaybeMessage<Top>(nullptr);
  }

  Top* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Top>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Top& from);
  void MergeFrom(const Top& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Top* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.Top";
  }
  protected:
  explicit Top(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Top_2eproto);
    return ::descriptor_table_Top_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Top_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
    kMakePoolFieldNumber = 2,
    kActivatePoolFieldNumber = 3,
    kDeactivatePoolFieldNumber = 4,
  };
  // .ServerPushInterface.Pool pool = 1;
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  const ::ServerPushInterface::Pool& pool() const;
  ::ServerPushInterface::Pool* release_pool();
  ::ServerPushInterface::Pool* mutable_pool();
  void set_allocated_pool(::ServerPushInterface::Pool* pool);
  private:
  const ::ServerPushInterface::Pool& _internal_pool() const;
  ::ServerPushInterface::Pool* _internal_mutable_pool();
  public:
  void unsafe_arena_set_allocated_pool(
      ::ServerPushInterface::Pool* pool);
  ::ServerPushInterface::Pool* unsafe_arena_release_pool();

  // .ServerPushInterface.TopMakePool make_pool = 2;
  bool has_make_pool() const;
  private:
  bool _internal_has_make_pool() const;
  public:
  void clear_make_pool();
  const ::ServerPushInterface::TopMakePool& make_pool() const;
  ::ServerPushInterface::TopMakePool* release_make_pool();
  ::ServerPushInterface::TopMakePool* mutable_make_pool();
  void set_allocated_make_pool(::ServerPushInterface::TopMakePool* make_pool);
  private:
  const ::ServerPushInterface::TopMakePool& _internal_make_pool() const;
  ::ServerPushInterface::TopMakePool* _internal_mutable_make_pool();
  public:
  void unsafe_arena_set_allocated_make_pool(
      ::ServerPushInterface::TopMakePool* make_pool);
  ::ServerPushInterface::TopMakePool* unsafe_arena_release_make_pool();

  // .ServerPushInterface.TopActivatePool activate_pool = 3;
  bool has_activate_pool() const;
  private:
  bool _internal_has_activate_pool() const;
  public:
  void clear_activate_pool();
  const ::ServerPushInterface::TopActivatePool& activate_pool() const;
  ::ServerPushInterface::TopActivatePool* release_activate_pool();
  ::ServerPushInterface::TopActivatePool* mutable_activate_pool();
  void set_allocated_activate_pool(::ServerPushInterface::TopActivatePool* activate_pool);
  private:
  const ::ServerPushInterface::TopActivatePool& _internal_activate_pool() const;
  ::ServerPushInterface::TopActivatePool* _internal_mutable_activate_pool();
  public:
  void unsafe_arena_set_allocated_activate_pool(
      ::ServerPushInterface::TopActivatePool* activate_pool);
  ::ServerPushInterface::TopActivatePool* unsafe_arena_release_activate_pool();

  // .ServerPushInterface.TopDeactivatePool deactivate_pool = 4;
  bool has_deactivate_pool() const;
  private:
  bool _internal_has_deactivate_pool() const;
  public:
  void clear_deactivate_pool();
  const ::ServerPushInterface::TopDeactivatePool& deactivate_pool() const;
  ::ServerPushInterface::TopDeactivatePool* release_deactivate_pool();
  ::ServerPushInterface::TopDeactivatePool* mutable_deactivate_pool();
  void set_allocated_deactivate_pool(::ServerPushInterface::TopDeactivatePool* deactivate_pool);
  private:
  const ::ServerPushInterface::TopDeactivatePool& _internal_deactivate_pool() const;
  ::ServerPushInterface::TopDeactivatePool* _internal_mutable_deactivate_pool();
  public:
  void unsafe_arena_set_allocated_deactivate_pool(
      ::ServerPushInterface::TopDeactivatePool* deactivate_pool);
  ::ServerPushInterface::TopDeactivatePool* unsafe_arena_release_deactivate_pool();

  void clear_Command();
  CommandCase Command_case() const;
  // @@protoc_insertion_point(class_scope:ServerPushInterface.Top)
 private:
  class _Internal;
  void set_has_pool();
  void set_has_make_pool();
  void set_has_activate_pool();
  void set_has_deactivate_pool();

  inline bool has_Command() const;
  inline void clear_has_Command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CommandUnion {
    CommandUnion() {}
    ::ServerPushInterface::Pool* pool_;
    ::ServerPushInterface::TopMakePool* make_pool_;
    ::ServerPushInterface::TopActivatePool* activate_pool_;
    ::ServerPushInterface::TopDeactivatePool* deactivate_pool_;
  } Command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Top_2eproto;
};
// -------------------------------------------------------------------

class TopActivatePool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.TopActivatePool) */ {
 public:
  inline TopActivatePool() : TopActivatePool(nullptr) {};
  virtual ~TopActivatePool();

  TopActivatePool(const TopActivatePool& from);
  TopActivatePool(TopActivatePool&& from) noexcept
    : TopActivatePool() {
    *this = ::std::move(from);
  }

  inline TopActivatePool& operator=(const TopActivatePool& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopActivatePool& operator=(TopActivatePool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopActivatePool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopActivatePool* internal_default_instance() {
    return reinterpret_cast<const TopActivatePool*>(
               &_TopActivatePool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TopActivatePool& a, TopActivatePool& b) {
    a.Swap(&b);
  }
  inline void Swap(TopActivatePool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopActivatePool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopActivatePool* New() const final {
    return CreateMaybeMessage<TopActivatePool>(nullptr);
  }

  TopActivatePool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopActivatePool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopActivatePool& from);
  void MergeFrom(const TopActivatePool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopActivatePool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.TopActivatePool";
  }
  protected:
  explicit TopActivatePool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Top_2eproto);
    return ::descriptor_table_Top_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolIdFieldNumber = 1,
  };
  // uint32 pool_id = 1;
  void clear_pool_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_id() const;
  void set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pool_id() const;
  void _internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerPushInterface.TopActivatePool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Top_2eproto;
};
// -------------------------------------------------------------------

class TopDeactivatePool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.TopDeactivatePool) */ {
 public:
  inline TopDeactivatePool() : TopDeactivatePool(nullptr) {};
  virtual ~TopDeactivatePool();

  TopDeactivatePool(const TopDeactivatePool& from);
  TopDeactivatePool(TopDeactivatePool&& from) noexcept
    : TopDeactivatePool() {
    *this = ::std::move(from);
  }

  inline TopDeactivatePool& operator=(const TopDeactivatePool& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopDeactivatePool& operator=(TopDeactivatePool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopDeactivatePool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopDeactivatePool* internal_default_instance() {
    return reinterpret_cast<const TopDeactivatePool*>(
               &_TopDeactivatePool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TopDeactivatePool& a, TopDeactivatePool& b) {
    a.Swap(&b);
  }
  inline void Swap(TopDeactivatePool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopDeactivatePool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopDeactivatePool* New() const final {
    return CreateMaybeMessage<TopDeactivatePool>(nullptr);
  }

  TopDeactivatePool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopDeactivatePool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopDeactivatePool& from);
  void MergeFrom(const TopDeactivatePool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopDeactivatePool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.TopDeactivatePool";
  }
  protected:
  explicit TopDeactivatePool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Top_2eproto);
    return ::descriptor_table_Top_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolIdFieldNumber = 1,
  };
  // uint32 pool_id = 1;
  void clear_pool_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_id() const;
  void set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pool_id() const;
  void _internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerPushInterface.TopDeactivatePool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Top_2eproto;
};
// -------------------------------------------------------------------

class TopMakePool_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.TopMakePool.Response) */ {
 public:
  inline TopMakePool_Response() : TopMakePool_Response(nullptr) {};
  virtual ~TopMakePool_Response();

  TopMakePool_Response(const TopMakePool_Response& from);
  TopMakePool_Response(TopMakePool_Response&& from) noexcept
    : TopMakePool_Response() {
    *this = ::std::move(from);
  }

  inline TopMakePool_Response& operator=(const TopMakePool_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopMakePool_Response& operator=(TopMakePool_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopMakePool_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopMakePool_Response* internal_default_instance() {
    return reinterpret_cast<const TopMakePool_Response*>(
               &_TopMakePool_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TopMakePool_Response& a, TopMakePool_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(TopMakePool_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopMakePool_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopMakePool_Response* New() const final {
    return CreateMaybeMessage<TopMakePool_Response>(nullptr);
  }

  TopMakePool_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopMakePool_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopMakePool_Response& from);
  void MergeFrom(const TopMakePool_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopMakePool_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.TopMakePool.Response";
  }
  protected:
  explicit TopMakePool_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Top_2eproto);
    return ::descriptor_table_Top_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolIdFieldNumber = 1,
  };
  // uint32 pool_id = 1;
  void clear_pool_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_id() const;
  void set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pool_id() const;
  void _internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerPushInterface.TopMakePool.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Top_2eproto;
};
// -------------------------------------------------------------------

class TopMakePool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPushInterface.TopMakePool) */ {
 public:
  inline TopMakePool() : TopMakePool(nullptr) {};
  virtual ~TopMakePool();

  TopMakePool(const TopMakePool& from);
  TopMakePool(TopMakePool&& from) noexcept
    : TopMakePool() {
    *this = ::std::move(from);
  }

  inline TopMakePool& operator=(const TopMakePool& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopMakePool& operator=(TopMakePool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopMakePool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopMakePool* internal_default_instance() {
    return reinterpret_cast<const TopMakePool*>(
               &_TopMakePool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TopMakePool& a, TopMakePool& b) {
    a.Swap(&b);
  }
  inline void Swap(TopMakePool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopMakePool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopMakePool* New() const final {
    return CreateMaybeMessage<TopMakePool>(nullptr);
  }

  TopMakePool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopMakePool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopMakePool& from);
  void MergeFrom(const TopMakePool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopMakePool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPushInterface.TopMakePool";
  }
  protected:
  explicit TopMakePool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Top_2eproto);
    return ::descriptor_table_Top_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TopMakePool_Response Response;

  typedef TopMakePool_Type Type;
  static constexpr Type Reserved =
    TopMakePool_Type_Reserved;
  static constexpr Type Alternatives =
    TopMakePool_Type_Alternatives;
  static constexpr Type OrderedLayers =
    TopMakePool_Type_OrderedLayers;
  static constexpr Type ArbitraryLayers =
    TopMakePool_Type_ArbitraryLayers;
  static inline bool Type_IsValid(int value) {
    return TopMakePool_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TopMakePool_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TopMakePool_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TopMakePool_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TopMakePool_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TopMakePool_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return TopMakePool_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .ServerPushInterface.TopMakePool.Type type = 1;
  void clear_type();
  ::ServerPushInterface::TopMakePool_Type type() const;
  void set_type(::ServerPushInterface::TopMakePool_Type value);
  private:
  ::ServerPushInterface::TopMakePool_Type _internal_type() const;
  void _internal_set_type(::ServerPushInterface::TopMakePool_Type value);
  public:

  // @@protoc_insertion_point(class_scope:ServerPushInterface.TopMakePool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Top_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Top_Response

// bool success = 1;
inline void Top_Response::clear_success() {
  success_ = false;
}
inline bool Top_Response::_internal_success() const {
  return success_;
}
inline bool Top_Response::success() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Top.Response.success)
  return _internal_success();
}
inline void Top_Response::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Top_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.Top.Response.success)
}

// string error_message = 2;
inline void Top_Response::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Top_Response::error_message() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Top.Response.error_message)
  return _internal_error_message();
}
inline void Top_Response::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.Top.Response.error_message)
}
inline std::string* Top_Response::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Top.Response.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& Top_Response::_internal_error_message() const {
  return error_message_.Get();
}
inline void Top_Response::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Top_Response::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerPushInterface.Top.Response.error_message)
}
inline void Top_Response::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServerPushInterface.Top.Response.error_message)
}
inline void Top_Response::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerPushInterface.Top.Response.error_message)
}
inline std::string* Top_Response::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Top_Response::release_error_message() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Top.Response.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Top_Response::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Top.Response.error_message)
}
inline std::string* Top_Response::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Top.Response.error_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Top_Response::unsafe_arena_set_allocated_error_message(
    std::string* error_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Top.Response.error_message)
}

// .ServerPushInterface.Pool.Response pool = 3;
inline bool Top_Response::_internal_has_pool() const {
  return CommandResponse_case() == kPool;
}
inline bool Top_Response::has_pool() const {
  return _internal_has_pool();
}
inline void Top_Response::set_has_pool() {
  _oneof_case_[0] = kPool;
}
inline ::ServerPushInterface::Pool_Response* Top_Response::release_pool() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Top.Response.pool)
  if (_internal_has_pool()) {
    clear_has_CommandResponse();
      ::ServerPushInterface::Pool_Response* temp = CommandResponse_.pool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CommandResponse_.pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::Pool_Response& Top_Response::_internal_pool() const {
  return _internal_has_pool()
      ? *CommandResponse_.pool_
      : *reinterpret_cast< ::ServerPushInterface::Pool_Response*>(&::ServerPushInterface::_Pool_Response_default_instance_);
}
inline const ::ServerPushInterface::Pool_Response& Top_Response::pool() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Top.Response.pool)
  return _internal_pool();
}
inline ::ServerPushInterface::Pool_Response* Top_Response::unsafe_arena_release_pool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Top.Response.pool)
  if (_internal_has_pool()) {
    clear_has_CommandResponse();
    ::ServerPushInterface::Pool_Response* temp = CommandResponse_.pool_;
    CommandResponse_.pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Top_Response::unsafe_arena_set_allocated_pool(::ServerPushInterface::Pool_Response* pool) {
  clear_CommandResponse();
  if (pool) {
    set_has_pool();
    CommandResponse_.pool_ = pool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Top.Response.pool)
}
inline ::ServerPushInterface::Pool_Response* Top_Response::_internal_mutable_pool() {
  if (!_internal_has_pool()) {
    clear_CommandResponse();
    set_has_pool();
    CommandResponse_.pool_ = CreateMaybeMessage< ::ServerPushInterface::Pool_Response >(GetArena());
  }
  return CommandResponse_.pool_;
}
inline ::ServerPushInterface::Pool_Response* Top_Response::mutable_pool() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Top.Response.pool)
  return _internal_mutable_pool();
}

// .ServerPushInterface.TopMakePool.Response make_pool = 4;
inline bool Top_Response::_internal_has_make_pool() const {
  return CommandResponse_case() == kMakePool;
}
inline bool Top_Response::has_make_pool() const {
  return _internal_has_make_pool();
}
inline void Top_Response::set_has_make_pool() {
  _oneof_case_[0] = kMakePool;
}
inline void Top_Response::clear_make_pool() {
  if (_internal_has_make_pool()) {
    if (GetArena() == nullptr) {
      delete CommandResponse_.make_pool_;
    }
    clear_has_CommandResponse();
  }
}
inline ::ServerPushInterface::TopMakePool_Response* Top_Response::release_make_pool() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Top.Response.make_pool)
  if (_internal_has_make_pool()) {
    clear_has_CommandResponse();
      ::ServerPushInterface::TopMakePool_Response* temp = CommandResponse_.make_pool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CommandResponse_.make_pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::TopMakePool_Response& Top_Response::_internal_make_pool() const {
  return _internal_has_make_pool()
      ? *CommandResponse_.make_pool_
      : *reinterpret_cast< ::ServerPushInterface::TopMakePool_Response*>(&::ServerPushInterface::_TopMakePool_Response_default_instance_);
}
inline const ::ServerPushInterface::TopMakePool_Response& Top_Response::make_pool() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Top.Response.make_pool)
  return _internal_make_pool();
}
inline ::ServerPushInterface::TopMakePool_Response* Top_Response::unsafe_arena_release_make_pool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Top.Response.make_pool)
  if (_internal_has_make_pool()) {
    clear_has_CommandResponse();
    ::ServerPushInterface::TopMakePool_Response* temp = CommandResponse_.make_pool_;
    CommandResponse_.make_pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Top_Response::unsafe_arena_set_allocated_make_pool(::ServerPushInterface::TopMakePool_Response* make_pool) {
  clear_CommandResponse();
  if (make_pool) {
    set_has_make_pool();
    CommandResponse_.make_pool_ = make_pool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Top.Response.make_pool)
}
inline ::ServerPushInterface::TopMakePool_Response* Top_Response::_internal_mutable_make_pool() {
  if (!_internal_has_make_pool()) {
    clear_CommandResponse();
    set_has_make_pool();
    CommandResponse_.make_pool_ = CreateMaybeMessage< ::ServerPushInterface::TopMakePool_Response >(GetArena());
  }
  return CommandResponse_.make_pool_;
}
inline ::ServerPushInterface::TopMakePool_Response* Top_Response::mutable_make_pool() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Top.Response.make_pool)
  return _internal_mutable_make_pool();
}

inline bool Top_Response::has_CommandResponse() const {
  return CommandResponse_case() != COMMANDRESPONSE_NOT_SET;
}
inline void Top_Response::clear_has_CommandResponse() {
  _oneof_case_[0] = COMMANDRESPONSE_NOT_SET;
}
inline Top_Response::CommandResponseCase Top_Response::CommandResponse_case() const {
  return Top_Response::CommandResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Top

// .ServerPushInterface.Pool pool = 1;
inline bool Top::_internal_has_pool() const {
  return Command_case() == kPool;
}
inline bool Top::has_pool() const {
  return _internal_has_pool();
}
inline void Top::set_has_pool() {
  _oneof_case_[0] = kPool;
}
inline ::ServerPushInterface::Pool* Top::release_pool() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Top.pool)
  if (_internal_has_pool()) {
    clear_has_Command();
      ::ServerPushInterface::Pool* temp = Command_.pool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::Pool& Top::_internal_pool() const {
  return _internal_has_pool()
      ? *Command_.pool_
      : *reinterpret_cast< ::ServerPushInterface::Pool*>(&::ServerPushInterface::_Pool_default_instance_);
}
inline const ::ServerPushInterface::Pool& Top::pool() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Top.pool)
  return _internal_pool();
}
inline ::ServerPushInterface::Pool* Top::unsafe_arena_release_pool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Top.pool)
  if (_internal_has_pool()) {
    clear_has_Command();
    ::ServerPushInterface::Pool* temp = Command_.pool_;
    Command_.pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Top::unsafe_arena_set_allocated_pool(::ServerPushInterface::Pool* pool) {
  clear_Command();
  if (pool) {
    set_has_pool();
    Command_.pool_ = pool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Top.pool)
}
inline ::ServerPushInterface::Pool* Top::_internal_mutable_pool() {
  if (!_internal_has_pool()) {
    clear_Command();
    set_has_pool();
    Command_.pool_ = CreateMaybeMessage< ::ServerPushInterface::Pool >(GetArena());
  }
  return Command_.pool_;
}
inline ::ServerPushInterface::Pool* Top::mutable_pool() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Top.pool)
  return _internal_mutable_pool();
}

// .ServerPushInterface.TopMakePool make_pool = 2;
inline bool Top::_internal_has_make_pool() const {
  return Command_case() == kMakePool;
}
inline bool Top::has_make_pool() const {
  return _internal_has_make_pool();
}
inline void Top::set_has_make_pool() {
  _oneof_case_[0] = kMakePool;
}
inline void Top::clear_make_pool() {
  if (_internal_has_make_pool()) {
    if (GetArena() == nullptr) {
      delete Command_.make_pool_;
    }
    clear_has_Command();
  }
}
inline ::ServerPushInterface::TopMakePool* Top::release_make_pool() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Top.make_pool)
  if (_internal_has_make_pool()) {
    clear_has_Command();
      ::ServerPushInterface::TopMakePool* temp = Command_.make_pool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.make_pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::TopMakePool& Top::_internal_make_pool() const {
  return _internal_has_make_pool()
      ? *Command_.make_pool_
      : *reinterpret_cast< ::ServerPushInterface::TopMakePool*>(&::ServerPushInterface::_TopMakePool_default_instance_);
}
inline const ::ServerPushInterface::TopMakePool& Top::make_pool() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Top.make_pool)
  return _internal_make_pool();
}
inline ::ServerPushInterface::TopMakePool* Top::unsafe_arena_release_make_pool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Top.make_pool)
  if (_internal_has_make_pool()) {
    clear_has_Command();
    ::ServerPushInterface::TopMakePool* temp = Command_.make_pool_;
    Command_.make_pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Top::unsafe_arena_set_allocated_make_pool(::ServerPushInterface::TopMakePool* make_pool) {
  clear_Command();
  if (make_pool) {
    set_has_make_pool();
    Command_.make_pool_ = make_pool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Top.make_pool)
}
inline ::ServerPushInterface::TopMakePool* Top::_internal_mutable_make_pool() {
  if (!_internal_has_make_pool()) {
    clear_Command();
    set_has_make_pool();
    Command_.make_pool_ = CreateMaybeMessage< ::ServerPushInterface::TopMakePool >(GetArena());
  }
  return Command_.make_pool_;
}
inline ::ServerPushInterface::TopMakePool* Top::mutable_make_pool() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Top.make_pool)
  return _internal_mutable_make_pool();
}

// .ServerPushInterface.TopActivatePool activate_pool = 3;
inline bool Top::_internal_has_activate_pool() const {
  return Command_case() == kActivatePool;
}
inline bool Top::has_activate_pool() const {
  return _internal_has_activate_pool();
}
inline void Top::set_has_activate_pool() {
  _oneof_case_[0] = kActivatePool;
}
inline void Top::clear_activate_pool() {
  if (_internal_has_activate_pool()) {
    if (GetArena() == nullptr) {
      delete Command_.activate_pool_;
    }
    clear_has_Command();
  }
}
inline ::ServerPushInterface::TopActivatePool* Top::release_activate_pool() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Top.activate_pool)
  if (_internal_has_activate_pool()) {
    clear_has_Command();
      ::ServerPushInterface::TopActivatePool* temp = Command_.activate_pool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.activate_pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::TopActivatePool& Top::_internal_activate_pool() const {
  return _internal_has_activate_pool()
      ? *Command_.activate_pool_
      : *reinterpret_cast< ::ServerPushInterface::TopActivatePool*>(&::ServerPushInterface::_TopActivatePool_default_instance_);
}
inline const ::ServerPushInterface::TopActivatePool& Top::activate_pool() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Top.activate_pool)
  return _internal_activate_pool();
}
inline ::ServerPushInterface::TopActivatePool* Top::unsafe_arena_release_activate_pool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Top.activate_pool)
  if (_internal_has_activate_pool()) {
    clear_has_Command();
    ::ServerPushInterface::TopActivatePool* temp = Command_.activate_pool_;
    Command_.activate_pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Top::unsafe_arena_set_allocated_activate_pool(::ServerPushInterface::TopActivatePool* activate_pool) {
  clear_Command();
  if (activate_pool) {
    set_has_activate_pool();
    Command_.activate_pool_ = activate_pool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Top.activate_pool)
}
inline ::ServerPushInterface::TopActivatePool* Top::_internal_mutable_activate_pool() {
  if (!_internal_has_activate_pool()) {
    clear_Command();
    set_has_activate_pool();
    Command_.activate_pool_ = CreateMaybeMessage< ::ServerPushInterface::TopActivatePool >(GetArena());
  }
  return Command_.activate_pool_;
}
inline ::ServerPushInterface::TopActivatePool* Top::mutable_activate_pool() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Top.activate_pool)
  return _internal_mutable_activate_pool();
}

// .ServerPushInterface.TopDeactivatePool deactivate_pool = 4;
inline bool Top::_internal_has_deactivate_pool() const {
  return Command_case() == kDeactivatePool;
}
inline bool Top::has_deactivate_pool() const {
  return _internal_has_deactivate_pool();
}
inline void Top::set_has_deactivate_pool() {
  _oneof_case_[0] = kDeactivatePool;
}
inline void Top::clear_deactivate_pool() {
  if (_internal_has_deactivate_pool()) {
    if (GetArena() == nullptr) {
      delete Command_.deactivate_pool_;
    }
    clear_has_Command();
  }
}
inline ::ServerPushInterface::TopDeactivatePool* Top::release_deactivate_pool() {
  // @@protoc_insertion_point(field_release:ServerPushInterface.Top.deactivate_pool)
  if (_internal_has_deactivate_pool()) {
    clear_has_Command();
      ::ServerPushInterface::TopDeactivatePool* temp = Command_.deactivate_pool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.deactivate_pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPushInterface::TopDeactivatePool& Top::_internal_deactivate_pool() const {
  return _internal_has_deactivate_pool()
      ? *Command_.deactivate_pool_
      : *reinterpret_cast< ::ServerPushInterface::TopDeactivatePool*>(&::ServerPushInterface::_TopDeactivatePool_default_instance_);
}
inline const ::ServerPushInterface::TopDeactivatePool& Top::deactivate_pool() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.Top.deactivate_pool)
  return _internal_deactivate_pool();
}
inline ::ServerPushInterface::TopDeactivatePool* Top::unsafe_arena_release_deactivate_pool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPushInterface.Top.deactivate_pool)
  if (_internal_has_deactivate_pool()) {
    clear_has_Command();
    ::ServerPushInterface::TopDeactivatePool* temp = Command_.deactivate_pool_;
    Command_.deactivate_pool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Top::unsafe_arena_set_allocated_deactivate_pool(::ServerPushInterface::TopDeactivatePool* deactivate_pool) {
  clear_Command();
  if (deactivate_pool) {
    set_has_deactivate_pool();
    Command_.deactivate_pool_ = deactivate_pool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPushInterface.Top.deactivate_pool)
}
inline ::ServerPushInterface::TopDeactivatePool* Top::_internal_mutable_deactivate_pool() {
  if (!_internal_has_deactivate_pool()) {
    clear_Command();
    set_has_deactivate_pool();
    Command_.deactivate_pool_ = CreateMaybeMessage< ::ServerPushInterface::TopDeactivatePool >(GetArena());
  }
  return Command_.deactivate_pool_;
}
inline ::ServerPushInterface::TopDeactivatePool* Top::mutable_deactivate_pool() {
  // @@protoc_insertion_point(field_mutable:ServerPushInterface.Top.deactivate_pool)
  return _internal_mutable_deactivate_pool();
}

inline bool Top::has_Command() const {
  return Command_case() != COMMAND_NOT_SET;
}
inline void Top::clear_has_Command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline Top::CommandCase Top::Command_case() const {
  return Top::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TopActivatePool

// uint32 pool_id = 1;
inline void TopActivatePool::clear_pool_id() {
  pool_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopActivatePool::_internal_pool_id() const {
  return pool_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopActivatePool::pool_id() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.TopActivatePool.pool_id)
  return _internal_pool_id();
}
inline void TopActivatePool::_internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pool_id_ = value;
}
inline void TopActivatePool::set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.TopActivatePool.pool_id)
}

// -------------------------------------------------------------------

// TopDeactivatePool

// uint32 pool_id = 1;
inline void TopDeactivatePool::clear_pool_id() {
  pool_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopDeactivatePool::_internal_pool_id() const {
  return pool_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopDeactivatePool::pool_id() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.TopDeactivatePool.pool_id)
  return _internal_pool_id();
}
inline void TopDeactivatePool::_internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pool_id_ = value;
}
inline void TopDeactivatePool::set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.TopDeactivatePool.pool_id)
}

// -------------------------------------------------------------------

// TopMakePool_Response

// uint32 pool_id = 1;
inline void TopMakePool_Response::clear_pool_id() {
  pool_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopMakePool_Response::_internal_pool_id() const {
  return pool_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopMakePool_Response::pool_id() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.TopMakePool.Response.pool_id)
  return _internal_pool_id();
}
inline void TopMakePool_Response::_internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pool_id_ = value;
}
inline void TopMakePool_Response::set_pool_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.TopMakePool.Response.pool_id)
}

// -------------------------------------------------------------------

// TopMakePool

// .ServerPushInterface.TopMakePool.Type type = 1;
inline void TopMakePool::clear_type() {
  type_ = 0;
}
inline ::ServerPushInterface::TopMakePool_Type TopMakePool::_internal_type() const {
  return static_cast< ::ServerPushInterface::TopMakePool_Type >(type_);
}
inline ::ServerPushInterface::TopMakePool_Type TopMakePool::type() const {
  // @@protoc_insertion_point(field_get:ServerPushInterface.TopMakePool.type)
  return _internal_type();
}
inline void TopMakePool::_internal_set_type(::ServerPushInterface::TopMakePool_Type value) {
  
  type_ = value;
}
inline void TopMakePool::set_type(::ServerPushInterface::TopMakePool_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ServerPushInterface.TopMakePool.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerPushInterface

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ServerPushInterface::TopMakePool_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerPushInterface::TopMakePool_Type>() {
  return ::ServerPushInterface::TopMakePool_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Top_2eproto
