// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Top.proto

#include "Top.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Pool_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Pool_Pool_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Pool_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pool_Response_Pool_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Top_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopActivatePool_Top_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Top_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopDeactivatePool_Top_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Top_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopMakePool_Top_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Top_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopMakePool_Response_Top_2eproto;
namespace ServerPushInterface {
class Top_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Top_Response> _instance;
  const ::ServerPushInterface::Pool_Response* pool_;
  const ::ServerPushInterface::TopMakePool_Response* make_pool_;
} _Top_Response_default_instance_;
class TopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Top> _instance;
  const ::ServerPushInterface::Pool* pool_;
  const ::ServerPushInterface::TopMakePool* make_pool_;
  const ::ServerPushInterface::TopActivatePool* activate_pool_;
  const ::ServerPushInterface::TopDeactivatePool* deactivate_pool_;
} _Top_default_instance_;
class TopActivatePoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopActivatePool> _instance;
} _TopActivatePool_default_instance_;
class TopDeactivatePoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopDeactivatePool> _instance;
} _TopDeactivatePool_default_instance_;
class TopMakePool_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopMakePool_Response> _instance;
} _TopMakePool_Response_default_instance_;
class TopMakePoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopMakePool> _instance;
} _TopMakePool_default_instance_;
}  // namespace ServerPushInterface
static void InitDefaultsscc_info_Top_Top_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_Top_default_instance_;
    new (ptr) ::ServerPushInterface::Top();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::Top::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Top_Top_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Top_Top_2eproto}, {
      &scc_info_Pool_Pool_2eproto.base,
      &scc_info_TopMakePool_Top_2eproto.base,
      &scc_info_TopActivatePool_Top_2eproto.base,
      &scc_info_TopDeactivatePool_Top_2eproto.base,}};

static void InitDefaultsscc_info_Top_Response_Top_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_Top_Response_default_instance_;
    new (ptr) ::ServerPushInterface::Top_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::Top_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Top_Response_Top_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Top_Response_Top_2eproto}, {
      &scc_info_Pool_Response_Pool_2eproto.base,
      &scc_info_TopMakePool_Response_Top_2eproto.base,}};

static void InitDefaultsscc_info_TopActivatePool_Top_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_TopActivatePool_default_instance_;
    new (ptr) ::ServerPushInterface::TopActivatePool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::TopActivatePool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopActivatePool_Top_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopActivatePool_Top_2eproto}, {}};

static void InitDefaultsscc_info_TopDeactivatePool_Top_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_TopDeactivatePool_default_instance_;
    new (ptr) ::ServerPushInterface::TopDeactivatePool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::TopDeactivatePool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopDeactivatePool_Top_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopDeactivatePool_Top_2eproto}, {}};

static void InitDefaultsscc_info_TopMakePool_Top_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_TopMakePool_default_instance_;
    new (ptr) ::ServerPushInterface::TopMakePool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::TopMakePool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopMakePool_Top_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopMakePool_Top_2eproto}, {}};

static void InitDefaultsscc_info_TopMakePool_Response_Top_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerPushInterface::_TopMakePool_Response_default_instance_;
    new (ptr) ::ServerPushInterface::TopMakePool_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerPushInterface::TopMakePool_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopMakePool_Response_Top_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopMakePool_Response_Top_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Top_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Top_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Top_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Top_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Top_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Top_Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Top_Response, success_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Top_Response, error_message_),
  offsetof(::ServerPushInterface::Top_ResponseDefaultTypeInternal, pool_),
  offsetof(::ServerPushInterface::Top_ResponseDefaultTypeInternal, make_pool_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Top_Response, CommandResponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Top, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Top, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ServerPushInterface::TopDefaultTypeInternal, pool_),
  offsetof(::ServerPushInterface::TopDefaultTypeInternal, make_pool_),
  offsetof(::ServerPushInterface::TopDefaultTypeInternal, activate_pool_),
  offsetof(::ServerPushInterface::TopDefaultTypeInternal, deactivate_pool_),
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::Top, Command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::TopActivatePool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::TopActivatePool, pool_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::TopDeactivatePool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::TopDeactivatePool, pool_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::TopMakePool_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::TopMakePool_Response, pool_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::TopMakePool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerPushInterface::TopMakePool, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ServerPushInterface::Top_Response)},
  { 10, -1, sizeof(::ServerPushInterface::Top)},
  { 20, -1, sizeof(::ServerPushInterface::TopActivatePool)},
  { 26, -1, sizeof(::ServerPushInterface::TopDeactivatePool)},
  { 32, -1, sizeof(::ServerPushInterface::TopMakePool_Response)},
  { 38, -1, sizeof(::ServerPushInterface::TopMakePool)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_Top_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_Top_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_TopActivatePool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_TopDeactivatePool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_TopMakePool_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerPushInterface::_TopMakePool_default_instance_),
};

const char descriptor_table_protodef_Top_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tTop.proto\022\023ServerPushInterface\032\nPool.p"
  "roto\"\260\003\n\003Top\022)\n\004pool\030\001 \001(\0132\031.ServerPushI"
  "nterface.PoolH\000\0225\n\tmake_pool\030\002 \001(\0132 .Ser"
  "verPushInterface.TopMakePoolH\000\022=\n\ractiva"
  "te_pool\030\003 \001(\0132$.ServerPushInterface.TopA"
  "ctivatePoolH\000\022A\n\017deactivate_pool\030\004 \001(\0132&"
  ".ServerPushInterface.TopDeactivatePoolH\000"
  "\032\271\001\n\010Response\022\017\n\007success\030\001 \001(\010\022\025\n\rerror_"
  "message\030\002 \001(\t\0222\n\004pool\030\003 \001(\0132\".ServerPush"
  "Interface.Pool.ResponseH\000\022>\n\tmake_pool\030\004"
  " \001(\0132).ServerPushInterface.TopMakePool.R"
  "esponseH\000B\021\n\017CommandResponseB\t\n\007Command\""
  "\"\n\017TopActivatePool\022\017\n\007pool_id\030\001 \001(\r\"$\n\021T"
  "opDeactivatePool\022\017\n\007pool_id\030\001 \001(\r\"\257\001\n\013To"
  "pMakePool\0223\n\004type\030\001 \001(\0162%.ServerPushInte"
  "rface.TopMakePool.Type\032\033\n\010Response\022\017\n\007po"
  "ol_id\030\001 \001(\r\"N\n\004Type\022\014\n\010Reserved\020\000\022\020\n\014Alt"
  "ernatives\020\001\022\021\n\rOrderedLayers\020\002\022\023\n\017Arbitr"
  "aryLayers\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Top_2eproto_deps[1] = {
  &::descriptor_table_Pool_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Top_2eproto_sccs[6] = {
  &scc_info_Top_Top_2eproto.base,
  &scc_info_Top_Response_Top_2eproto.base,
  &scc_info_TopActivatePool_Top_2eproto.base,
  &scc_info_TopDeactivatePool_Top_2eproto.base,
  &scc_info_TopMakePool_Top_2eproto.base,
  &scc_info_TopMakePool_Response_Top_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Top_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Top_2eproto = {
  false, false, descriptor_table_protodef_Top_2eproto, "Top.proto", 739,
  &descriptor_table_Top_2eproto_once, descriptor_table_Top_2eproto_sccs, descriptor_table_Top_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_Top_2eproto::offsets,
  file_level_metadata_Top_2eproto, 6, file_level_enum_descriptors_Top_2eproto, file_level_service_descriptors_Top_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Top_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Top_2eproto)), true);
namespace ServerPushInterface {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TopMakePool_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Top_2eproto);
  return file_level_enum_descriptors_Top_2eproto[0];
}
bool TopMakePool_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TopMakePool_Type TopMakePool::Reserved;
constexpr TopMakePool_Type TopMakePool::Alternatives;
constexpr TopMakePool_Type TopMakePool::OrderedLayers;
constexpr TopMakePool_Type TopMakePool::ArbitraryLayers;
constexpr TopMakePool_Type TopMakePool::Type_MIN;
constexpr TopMakePool_Type TopMakePool::Type_MAX;
constexpr int TopMakePool::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Top_Response::InitAsDefaultInstance() {
  ::ServerPushInterface::_Top_Response_default_instance_.pool_ = const_cast< ::ServerPushInterface::Pool_Response*>(
      ::ServerPushInterface::Pool_Response::internal_default_instance());
  ::ServerPushInterface::_Top_Response_default_instance_.make_pool_ = const_cast< ::ServerPushInterface::TopMakePool_Response*>(
      ::ServerPushInterface::TopMakePool_Response::internal_default_instance());
}
class Top_Response::_Internal {
 public:
  static const ::ServerPushInterface::Pool_Response& pool(const Top_Response* msg);
  static const ::ServerPushInterface::TopMakePool_Response& make_pool(const Top_Response* msg);
};

const ::ServerPushInterface::Pool_Response&
Top_Response::_Internal::pool(const Top_Response* msg) {
  return *msg->CommandResponse_.pool_;
}
const ::ServerPushInterface::TopMakePool_Response&
Top_Response::_Internal::make_pool(const Top_Response* msg) {
  return *msg->CommandResponse_.make_pool_;
}
void Top_Response::set_allocated_pool(::ServerPushInterface::Pool_Response* pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_CommandResponse();
  if (pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pool)->GetArena();
    if (message_arena != submessage_arena) {
      pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pool, submessage_arena);
    }
    set_has_pool();
    CommandResponse_.pool_ = pool;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Top.Response.pool)
}
void Top_Response::clear_pool() {
  if (_internal_has_pool()) {
    if (GetArena() == nullptr) {
      delete CommandResponse_.pool_;
    }
    clear_has_CommandResponse();
  }
}
void Top_Response::set_allocated_make_pool(::ServerPushInterface::TopMakePool_Response* make_pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_CommandResponse();
  if (make_pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(make_pool);
    if (message_arena != submessage_arena) {
      make_pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_pool, submessage_arena);
    }
    set_has_make_pool();
    CommandResponse_.make_pool_ = make_pool;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Top.Response.make_pool)
}
Top_Response::Top_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.Top.Response)
}
Top_Response::Top_Response(const Top_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  success_ = from.success_;
  clear_has_CommandResponse();
  switch (from.CommandResponse_case()) {
    case kPool: {
      _internal_mutable_pool()->::ServerPushInterface::Pool_Response::MergeFrom(from._internal_pool());
      break;
    }
    case kMakePool: {
      _internal_mutable_make_pool()->::ServerPushInterface::TopMakePool_Response::MergeFrom(from._internal_make_pool());
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.Top.Response)
}

void Top_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Top_Response_Top_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  clear_has_CommandResponse();
}

Top_Response::~Top_Response() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.Top.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Top_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_CommandResponse()) {
    clear_CommandResponse();
  }
}

void Top_Response::ArenaDtor(void* object) {
  Top_Response* _this = reinterpret_cast< Top_Response* >(object);
  (void)_this;
}
void Top_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Top_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Top_Response& Top_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Top_Response_Top_2eproto.base);
  return *internal_default_instance();
}


void Top_Response::clear_CommandResponse() {
// @@protoc_insertion_point(one_of_clear_start:ServerPushInterface.Top.Response)
  switch (CommandResponse_case()) {
    case kPool: {
      if (GetArena() == nullptr) {
        delete CommandResponse_.pool_;
      }
      break;
    }
    case kMakePool: {
      if (GetArena() == nullptr) {
        delete CommandResponse_.make_pool_;
      }
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMANDRESPONSE_NOT_SET;
}


void Top_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.Top.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_ = false;
  clear_CommandResponse();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Top_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerPushInterface.Top.Response.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.Pool.Response pool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.TopMakePool.Response make_pool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Top_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.Top.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerPushInterface.Top.Response.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // .ServerPushInterface.Pool.Response pool = 3;
  if (_internal_has_pool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pool(this), target, stream);
  }

  // .ServerPushInterface.TopMakePool.Response make_pool = 4;
  if (_internal_has_make_pool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::make_pool(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.Top.Response)
  return target;
}

size_t Top_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.Top.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  switch (CommandResponse_case()) {
    // .ServerPushInterface.Pool.Response pool = 3;
    case kPool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CommandResponse_.pool_);
      break;
    }
    // .ServerPushInterface.TopMakePool.Response make_pool = 4;
    case kMakePool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CommandResponse_.make_pool_);
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Top_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.Top.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Top_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Top_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.Top.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.Top.Response)
    MergeFrom(*source);
  }
}

void Top_Response::MergeFrom(const Top_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.Top.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  switch (from.CommandResponse_case()) {
    case kPool: {
      _internal_mutable_pool()->::ServerPushInterface::Pool_Response::MergeFrom(from._internal_pool());
      break;
    }
    case kMakePool: {
      _internal_mutable_make_pool()->::ServerPushInterface::TopMakePool_Response::MergeFrom(from._internal_make_pool());
      break;
    }
    case COMMANDRESPONSE_NOT_SET: {
      break;
    }
  }
}

void Top_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.Top.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Top_Response::CopyFrom(const Top_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.Top.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Top_Response::IsInitialized() const {
  return true;
}

void Top_Response::InternalSwap(Top_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
  swap(CommandResponse_, other->CommandResponse_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Top_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Top::InitAsDefaultInstance() {
  ::ServerPushInterface::_Top_default_instance_.pool_ = const_cast< ::ServerPushInterface::Pool*>(
      ::ServerPushInterface::Pool::internal_default_instance());
  ::ServerPushInterface::_Top_default_instance_.make_pool_ = const_cast< ::ServerPushInterface::TopMakePool*>(
      ::ServerPushInterface::TopMakePool::internal_default_instance());
  ::ServerPushInterface::_Top_default_instance_.activate_pool_ = const_cast< ::ServerPushInterface::TopActivatePool*>(
      ::ServerPushInterface::TopActivatePool::internal_default_instance());
  ::ServerPushInterface::_Top_default_instance_.deactivate_pool_ = const_cast< ::ServerPushInterface::TopDeactivatePool*>(
      ::ServerPushInterface::TopDeactivatePool::internal_default_instance());
}
class Top::_Internal {
 public:
  static const ::ServerPushInterface::Pool& pool(const Top* msg);
  static const ::ServerPushInterface::TopMakePool& make_pool(const Top* msg);
  static const ::ServerPushInterface::TopActivatePool& activate_pool(const Top* msg);
  static const ::ServerPushInterface::TopDeactivatePool& deactivate_pool(const Top* msg);
};

const ::ServerPushInterface::Pool&
Top::_Internal::pool(const Top* msg) {
  return *msg->Command_.pool_;
}
const ::ServerPushInterface::TopMakePool&
Top::_Internal::make_pool(const Top* msg) {
  return *msg->Command_.make_pool_;
}
const ::ServerPushInterface::TopActivatePool&
Top::_Internal::activate_pool(const Top* msg) {
  return *msg->Command_.activate_pool_;
}
const ::ServerPushInterface::TopDeactivatePool&
Top::_Internal::deactivate_pool(const Top* msg) {
  return *msg->Command_.deactivate_pool_;
}
void Top::set_allocated_pool(::ServerPushInterface::Pool* pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pool)->GetArena();
    if (message_arena != submessage_arena) {
      pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pool, submessage_arena);
    }
    set_has_pool();
    Command_.pool_ = pool;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Top.pool)
}
void Top::clear_pool() {
  if (_internal_has_pool()) {
    if (GetArena() == nullptr) {
      delete Command_.pool_;
    }
    clear_has_Command();
  }
}
void Top::set_allocated_make_pool(::ServerPushInterface::TopMakePool* make_pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (make_pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(make_pool);
    if (message_arena != submessage_arena) {
      make_pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_pool, submessage_arena);
    }
    set_has_make_pool();
    Command_.make_pool_ = make_pool;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Top.make_pool)
}
void Top::set_allocated_activate_pool(::ServerPushInterface::TopActivatePool* activate_pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (activate_pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(activate_pool);
    if (message_arena != submessage_arena) {
      activate_pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate_pool, submessage_arena);
    }
    set_has_activate_pool();
    Command_.activate_pool_ = activate_pool;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Top.activate_pool)
}
void Top::set_allocated_deactivate_pool(::ServerPushInterface::TopDeactivatePool* deactivate_pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (deactivate_pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deactivate_pool);
    if (message_arena != submessage_arena) {
      deactivate_pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deactivate_pool, submessage_arena);
    }
    set_has_deactivate_pool();
    Command_.deactivate_pool_ = deactivate_pool;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerPushInterface.Top.deactivate_pool)
}
Top::Top(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.Top)
}
Top::Top(const Top& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Command();
  switch (from.Command_case()) {
    case kPool: {
      _internal_mutable_pool()->::ServerPushInterface::Pool::MergeFrom(from._internal_pool());
      break;
    }
    case kMakePool: {
      _internal_mutable_make_pool()->::ServerPushInterface::TopMakePool::MergeFrom(from._internal_make_pool());
      break;
    }
    case kActivatePool: {
      _internal_mutable_activate_pool()->::ServerPushInterface::TopActivatePool::MergeFrom(from._internal_activate_pool());
      break;
    }
    case kDeactivatePool: {
      _internal_mutable_deactivate_pool()->::ServerPushInterface::TopDeactivatePool::MergeFrom(from._internal_deactivate_pool());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.Top)
}

void Top::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Top_Top_2eproto.base);
  clear_has_Command();
}

Top::~Top() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.Top)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Top::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Command()) {
    clear_Command();
  }
}

void Top::ArenaDtor(void* object) {
  Top* _this = reinterpret_cast< Top* >(object);
  (void)_this;
}
void Top::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Top::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Top& Top::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Top_Top_2eproto.base);
  return *internal_default_instance();
}


void Top::clear_Command() {
// @@protoc_insertion_point(one_of_clear_start:ServerPushInterface.Top)
  switch (Command_case()) {
    case kPool: {
      if (GetArena() == nullptr) {
        delete Command_.pool_;
      }
      break;
    }
    case kMakePool: {
      if (GetArena() == nullptr) {
        delete Command_.make_pool_;
      }
      break;
    }
    case kActivatePool: {
      if (GetArena() == nullptr) {
        delete Command_.activate_pool_;
      }
      break;
    }
    case kDeactivatePool: {
      if (GetArena() == nullptr) {
        delete Command_.deactivate_pool_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Top::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.Top)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Top::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServerPushInterface.Pool pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.TopMakePool make_pool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.TopActivatePool activate_pool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_activate_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerPushInterface.TopDeactivatePool deactivate_pool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deactivate_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Top::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.Top)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerPushInterface.Pool pool = 1;
  if (_internal_has_pool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pool(this), target, stream);
  }

  // .ServerPushInterface.TopMakePool make_pool = 2;
  if (_internal_has_make_pool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::make_pool(this), target, stream);
  }

  // .ServerPushInterface.TopActivatePool activate_pool = 3;
  if (_internal_has_activate_pool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::activate_pool(this), target, stream);
  }

  // .ServerPushInterface.TopDeactivatePool deactivate_pool = 4;
  if (_internal_has_deactivate_pool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::deactivate_pool(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.Top)
  return target;
}

size_t Top::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.Top)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Command_case()) {
    // .ServerPushInterface.Pool pool = 1;
    case kPool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.pool_);
      break;
    }
    // .ServerPushInterface.TopMakePool make_pool = 2;
    case kMakePool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.make_pool_);
      break;
    }
    // .ServerPushInterface.TopActivatePool activate_pool = 3;
    case kActivatePool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.activate_pool_);
      break;
    }
    // .ServerPushInterface.TopDeactivatePool deactivate_pool = 4;
    case kDeactivatePool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.deactivate_pool_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Top::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.Top)
  GOOGLE_DCHECK_NE(&from, this);
  const Top* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Top>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.Top)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.Top)
    MergeFrom(*source);
  }
}

void Top::MergeFrom(const Top& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.Top)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Command_case()) {
    case kPool: {
      _internal_mutable_pool()->::ServerPushInterface::Pool::MergeFrom(from._internal_pool());
      break;
    }
    case kMakePool: {
      _internal_mutable_make_pool()->::ServerPushInterface::TopMakePool::MergeFrom(from._internal_make_pool());
      break;
    }
    case kActivatePool: {
      _internal_mutable_activate_pool()->::ServerPushInterface::TopActivatePool::MergeFrom(from._internal_activate_pool());
      break;
    }
    case kDeactivatePool: {
      _internal_mutable_deactivate_pool()->::ServerPushInterface::TopDeactivatePool::MergeFrom(from._internal_deactivate_pool());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void Top::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.Top)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Top::CopyFrom(const Top& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.Top)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Top::IsInitialized() const {
  return true;
}

void Top::InternalSwap(Top* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Command_, other->Command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Top::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopActivatePool::InitAsDefaultInstance() {
}
class TopActivatePool::_Internal {
 public:
};

TopActivatePool::TopActivatePool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.TopActivatePool)
}
TopActivatePool::TopActivatePool(const TopActivatePool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_id_ = from.pool_id_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.TopActivatePool)
}

void TopActivatePool::SharedCtor() {
  pool_id_ = 0u;
}

TopActivatePool::~TopActivatePool() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.TopActivatePool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopActivatePool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopActivatePool::ArenaDtor(void* object) {
  TopActivatePool* _this = reinterpret_cast< TopActivatePool* >(object);
  (void)_this;
}
void TopActivatePool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopActivatePool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopActivatePool& TopActivatePool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopActivatePool_Top_2eproto.base);
  return *internal_default_instance();
}


void TopActivatePool::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.TopActivatePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopActivatePool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pool_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopActivatePool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.TopActivatePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pool_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.TopActivatePool)
  return target;
}

size_t TopActivatePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.TopActivatePool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pool_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopActivatePool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.TopActivatePool)
  GOOGLE_DCHECK_NE(&from, this);
  const TopActivatePool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopActivatePool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.TopActivatePool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.TopActivatePool)
    MergeFrom(*source);
  }
}

void TopActivatePool::MergeFrom(const TopActivatePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.TopActivatePool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
}

void TopActivatePool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.TopActivatePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopActivatePool::CopyFrom(const TopActivatePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.TopActivatePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopActivatePool::IsInitialized() const {
  return true;
}

void TopActivatePool::InternalSwap(TopActivatePool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pool_id_, other->pool_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopActivatePool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopDeactivatePool::InitAsDefaultInstance() {
}
class TopDeactivatePool::_Internal {
 public:
};

TopDeactivatePool::TopDeactivatePool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.TopDeactivatePool)
}
TopDeactivatePool::TopDeactivatePool(const TopDeactivatePool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_id_ = from.pool_id_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.TopDeactivatePool)
}

void TopDeactivatePool::SharedCtor() {
  pool_id_ = 0u;
}

TopDeactivatePool::~TopDeactivatePool() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.TopDeactivatePool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopDeactivatePool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopDeactivatePool::ArenaDtor(void* object) {
  TopDeactivatePool* _this = reinterpret_cast< TopDeactivatePool* >(object);
  (void)_this;
}
void TopDeactivatePool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopDeactivatePool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopDeactivatePool& TopDeactivatePool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopDeactivatePool_Top_2eproto.base);
  return *internal_default_instance();
}


void TopDeactivatePool::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.TopDeactivatePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopDeactivatePool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pool_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopDeactivatePool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.TopDeactivatePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pool_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.TopDeactivatePool)
  return target;
}

size_t TopDeactivatePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.TopDeactivatePool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pool_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopDeactivatePool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.TopDeactivatePool)
  GOOGLE_DCHECK_NE(&from, this);
  const TopDeactivatePool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopDeactivatePool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.TopDeactivatePool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.TopDeactivatePool)
    MergeFrom(*source);
  }
}

void TopDeactivatePool::MergeFrom(const TopDeactivatePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.TopDeactivatePool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
}

void TopDeactivatePool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.TopDeactivatePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopDeactivatePool::CopyFrom(const TopDeactivatePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.TopDeactivatePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopDeactivatePool::IsInitialized() const {
  return true;
}

void TopDeactivatePool::InternalSwap(TopDeactivatePool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pool_id_, other->pool_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopDeactivatePool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopMakePool_Response::InitAsDefaultInstance() {
}
class TopMakePool_Response::_Internal {
 public:
};

TopMakePool_Response::TopMakePool_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.TopMakePool.Response)
}
TopMakePool_Response::TopMakePool_Response(const TopMakePool_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_id_ = from.pool_id_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.TopMakePool.Response)
}

void TopMakePool_Response::SharedCtor() {
  pool_id_ = 0u;
}

TopMakePool_Response::~TopMakePool_Response() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.TopMakePool.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopMakePool_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopMakePool_Response::ArenaDtor(void* object) {
  TopMakePool_Response* _this = reinterpret_cast< TopMakePool_Response* >(object);
  (void)_this;
}
void TopMakePool_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopMakePool_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopMakePool_Response& TopMakePool_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopMakePool_Response_Top_2eproto.base);
  return *internal_default_instance();
}


void TopMakePool_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.TopMakePool.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopMakePool_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pool_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopMakePool_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.TopMakePool.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pool_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.TopMakePool.Response)
  return target;
}

size_t TopMakePool_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.TopMakePool.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pool_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopMakePool_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.TopMakePool.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const TopMakePool_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopMakePool_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.TopMakePool.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.TopMakePool.Response)
    MergeFrom(*source);
  }
}

void TopMakePool_Response::MergeFrom(const TopMakePool_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.TopMakePool.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
}

void TopMakePool_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.TopMakePool.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopMakePool_Response::CopyFrom(const TopMakePool_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.TopMakePool.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopMakePool_Response::IsInitialized() const {
  return true;
}

void TopMakePool_Response::InternalSwap(TopMakePool_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pool_id_, other->pool_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopMakePool_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopMakePool::InitAsDefaultInstance() {
}
class TopMakePool::_Internal {
 public:
};

TopMakePool::TopMakePool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerPushInterface.TopMakePool)
}
TopMakePool::TopMakePool(const TopMakePool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ServerPushInterface.TopMakePool)
}

void TopMakePool::SharedCtor() {
  type_ = 0;
}

TopMakePool::~TopMakePool() {
  // @@protoc_insertion_point(destructor:ServerPushInterface.TopMakePool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopMakePool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopMakePool::ArenaDtor(void* object) {
  TopMakePool* _this = reinterpret_cast< TopMakePool* >(object);
  (void)_this;
}
void TopMakePool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopMakePool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopMakePool& TopMakePool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopMakePool_Top_2eproto.base);
  return *internal_default_instance();
}


void TopMakePool::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerPushInterface.TopMakePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopMakePool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServerPushInterface.TopMakePool.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ServerPushInterface::TopMakePool_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopMakePool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPushInterface.TopMakePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerPushInterface.TopMakePool.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPushInterface.TopMakePool)
  return target;
}

size_t TopMakePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerPushInterface.TopMakePool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerPushInterface.TopMakePool.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopMakePool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerPushInterface.TopMakePool)
  GOOGLE_DCHECK_NE(&from, this);
  const TopMakePool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopMakePool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerPushInterface.TopMakePool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerPushInterface.TopMakePool)
    MergeFrom(*source);
  }
}

void TopMakePool::MergeFrom(const TopMakePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerPushInterface.TopMakePool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TopMakePool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerPushInterface.TopMakePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopMakePool::CopyFrom(const TopMakePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerPushInterface.TopMakePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopMakePool::IsInitialized() const {
  return true;
}

void TopMakePool::InternalSwap(TopMakePool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopMakePool::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ServerPushInterface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerPushInterface::Top_Response* Arena::CreateMaybeMessage< ::ServerPushInterface::Top_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::Top_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::Top* Arena::CreateMaybeMessage< ::ServerPushInterface::Top >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::Top >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::TopActivatePool* Arena::CreateMaybeMessage< ::ServerPushInterface::TopActivatePool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::TopActivatePool >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::TopDeactivatePool* Arena::CreateMaybeMessage< ::ServerPushInterface::TopDeactivatePool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::TopDeactivatePool >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::TopMakePool_Response* Arena::CreateMaybeMessage< ::ServerPushInterface::TopMakePool_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::TopMakePool_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerPushInterface::TopMakePool* Arena::CreateMaybeMessage< ::ServerPushInterface::TopMakePool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerPushInterface::TopMakePool >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
